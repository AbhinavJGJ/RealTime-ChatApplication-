"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/openai";
exports.ids = ["vendor-chunks/openai"];
exports.modules = {

/***/ "(rsc)/./node_modules/openai/dist/api.js":
/*!*****************************************!*\
  !*** ./node_modules/openai/dist/api.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * OpenAI API\n * APIs for sampling from and fine-tuning language models\n *\n * The version of the OpenAPI document: 1.3.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OpenAIApi = exports.OpenAIApiFactory = exports.OpenAIApiFp = exports.OpenAIApiAxiosParamCreator = exports.CreateImageRequestResponseFormatEnum = exports.CreateImageRequestSizeEnum = exports.ChatCompletionResponseMessageRoleEnum = exports.ChatCompletionRequestMessageRoleEnum = void 0;\nconst axios_1 = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/openai/node_modules/axios/index.js\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/openai/dist/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/openai/dist/base.js\");\nexports.ChatCompletionRequestMessageRoleEnum = {\n    System: \"system\",\n    User: \"user\",\n    Assistant: \"assistant\",\n    Function: \"function\"\n};\nexports.ChatCompletionResponseMessageRoleEnum = {\n    System: \"system\",\n    User: \"user\",\n    Assistant: \"assistant\",\n    Function: \"function\"\n};\nexports.CreateImageRequestSizeEnum = {\n    _256x256: \"256x256\",\n    _512x512: \"512x512\",\n    _1024x1024: \"1024x1024\"\n};\nexports.CreateImageRequestResponseFormatEnum = {\n    Url: \"url\",\n    B64Json: \"b64_json\"\n};\n/**\n * OpenAIApi - axios parameter creator\n * @export\n */ exports.OpenAIApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         *\n         * @summary Immediately cancel a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to cancel\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ cancelFineTune: (fineTuneId, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'fineTuneId' is not null or undefined\n                common_1.assertParamExists(\"cancelFineTune\", \"fineTuneId\", fineTuneId);\n                const localVarPath = `/fine-tunes/{fine_tune_id}/cancel`.replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId)));\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n         * @param {CreateAnswerRequest} createAnswerRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ createAnswer: (createAnswerRequest, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'createAnswerRequest' is not null or undefined\n                common_1.assertParamExists(\"createAnswer\", \"createAnswerRequest\", createAnswerRequest);\n                const localVarPath = `/answers`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = common_1.serializeDataIfNeeded(createAnswerRequest, localVarRequestOptions, configuration);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Creates a model response for the given chat conversation.\n         * @param {CreateChatCompletionRequest} createChatCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createChatCompletion: (createChatCompletionRequest, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'createChatCompletionRequest' is not null or undefined\n                common_1.assertParamExists(\"createChatCompletion\", \"createChatCompletionRequest\", createChatCompletionRequest);\n                const localVarPath = `/chat/completions`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = common_1.serializeDataIfNeeded(createChatCompletionRequest, localVarRequestOptions, configuration);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n         * @param {CreateClassificationRequest} createClassificationRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ createClassification: (createClassificationRequest, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'createClassificationRequest' is not null or undefined\n                common_1.assertParamExists(\"createClassification\", \"createClassificationRequest\", createClassificationRequest);\n                const localVarPath = `/classifications`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = common_1.serializeDataIfNeeded(createClassificationRequest, localVarRequestOptions, configuration);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Creates a completion for the provided prompt and parameters.\n         * @param {CreateCompletionRequest} createCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createCompletion: (createCompletionRequest, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'createCompletionRequest' is not null or undefined\n                common_1.assertParamExists(\"createCompletion\", \"createCompletionRequest\", createCompletionRequest);\n                const localVarPath = `/completions`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = common_1.serializeDataIfNeeded(createCompletionRequest, localVarRequestOptions, configuration);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Creates a new edit for the provided input, instruction, and parameters.\n         * @param {CreateEditRequest} createEditRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createEdit: (createEditRequest, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'createEditRequest' is not null or undefined\n                common_1.assertParamExists(\"createEdit\", \"createEditRequest\", createEditRequest);\n                const localVarPath = `/edits`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEditRequest, localVarRequestOptions, configuration);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Creates an embedding vector representing the input text.\n         * @param {CreateEmbeddingRequest} createEmbeddingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createEmbedding: (createEmbeddingRequest, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'createEmbeddingRequest' is not null or undefined\n                common_1.assertParamExists(\"createEmbedding\", \"createEmbeddingRequest\", createEmbeddingRequest);\n                const localVarPath = `/embeddings`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEmbeddingRequest, localVarRequestOptions, configuration);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n         * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createFile: (file, purpose, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'file' is not null or undefined\n                common_1.assertParamExists(\"createFile\", \"file\", file);\n                // verify required parameter 'purpose' is not null or undefined\n                common_1.assertParamExists(\"createFile\", \"purpose\", purpose);\n                const localVarPath = `/files`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n                if (file !== undefined) {\n                    localVarFormParams.append(\"file\", file);\n                }\n                if (purpose !== undefined) {\n                    localVarFormParams.append(\"purpose\", purpose);\n                }\n                localVarHeaderParameter[\"Content-Type\"] = \"multipart/form-data\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = localVarFormParams;\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {CreateFineTuneRequest} createFineTuneRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createFineTune: (createFineTuneRequest, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'createFineTuneRequest' is not null or undefined\n                common_1.assertParamExists(\"createFineTune\", \"createFineTuneRequest\", createFineTuneRequest);\n                const localVarPath = `/fine-tunes`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = common_1.serializeDataIfNeeded(createFineTuneRequest, localVarRequestOptions, configuration);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Creates an image given a prompt.\n         * @param {CreateImageRequest} createImageRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createImage: (createImageRequest, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'createImageRequest' is not null or undefined\n                common_1.assertParamExists(\"createImage\", \"createImageRequest\", createImageRequest);\n                const localVarPath = `/images/generations`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = common_1.serializeDataIfNeeded(createImageRequest, localVarRequestOptions, configuration);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Creates an edited or extended image given an original image and a prompt.\n         * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.\n         * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n         * @param {File} [mask] An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createImageEdit: (image, prompt, mask, n, size, responseFormat, user, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'image' is not null or undefined\n                common_1.assertParamExists(\"createImageEdit\", \"image\", image);\n                // verify required parameter 'prompt' is not null or undefined\n                common_1.assertParamExists(\"createImageEdit\", \"prompt\", prompt);\n                const localVarPath = `/images/edits`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n                if (image !== undefined) {\n                    localVarFormParams.append(\"image\", image);\n                }\n                if (mask !== undefined) {\n                    localVarFormParams.append(\"mask\", mask);\n                }\n                if (prompt !== undefined) {\n                    localVarFormParams.append(\"prompt\", prompt);\n                }\n                if (n !== undefined) {\n                    localVarFormParams.append(\"n\", n);\n                }\n                if (size !== undefined) {\n                    localVarFormParams.append(\"size\", size);\n                }\n                if (responseFormat !== undefined) {\n                    localVarFormParams.append(\"response_format\", responseFormat);\n                }\n                if (user !== undefined) {\n                    localVarFormParams.append(\"user\", user);\n                }\n                localVarHeaderParameter[\"Content-Type\"] = \"multipart/form-data\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = localVarFormParams;\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Creates a variation of a given image.\n         * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createImageVariation: (image, n, size, responseFormat, user, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'image' is not null or undefined\n                common_1.assertParamExists(\"createImageVariation\", \"image\", image);\n                const localVarPath = `/images/variations`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n                if (image !== undefined) {\n                    localVarFormParams.append(\"image\", image);\n                }\n                if (n !== undefined) {\n                    localVarFormParams.append(\"n\", n);\n                }\n                if (size !== undefined) {\n                    localVarFormParams.append(\"size\", size);\n                }\n                if (responseFormat !== undefined) {\n                    localVarFormParams.append(\"response_format\", responseFormat);\n                }\n                if (user !== undefined) {\n                    localVarFormParams.append(\"user\", user);\n                }\n                localVarHeaderParameter[\"Content-Type\"] = \"multipart/form-data\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = localVarFormParams;\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Classifies if text violates OpenAI\\'s Content Policy\n         * @param {CreateModerationRequest} createModerationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createModeration: (createModerationRequest, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'createModerationRequest' is not null or undefined\n                common_1.assertParamExists(\"createModeration\", \"createModerationRequest\", createModerationRequest);\n                const localVarPath = `/moderations`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = common_1.serializeDataIfNeeded(createModerationRequest, localVarRequestOptions, configuration);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n         * @param {CreateSearchRequest} createSearchRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ createSearch: (engineId, createSearchRequest, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'engineId' is not null or undefined\n                common_1.assertParamExists(\"createSearch\", \"engineId\", engineId);\n                // verify required parameter 'createSearchRequest' is not null or undefined\n                common_1.assertParamExists(\"createSearch\", \"createSearchRequest\", createSearchRequest);\n                const localVarPath = `/engines/{engine_id}/search`.replace(`{${\"engine_id\"}}`, encodeURIComponent(String(engineId)));\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = common_1.serializeDataIfNeeded(createSearchRequest, localVarRequestOptions, configuration);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Transcribes audio into the input language.\n         * @param {File} file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.\n         * @param {string} [prompt] An optional text to guide the model\\\\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.\n         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n         * @param {string} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createTranscription: (file, model, prompt, responseFormat, temperature, language, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'file' is not null or undefined\n                common_1.assertParamExists(\"createTranscription\", \"file\", file);\n                // verify required parameter 'model' is not null or undefined\n                common_1.assertParamExists(\"createTranscription\", \"model\", model);\n                const localVarPath = `/audio/transcriptions`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n                if (file !== undefined) {\n                    localVarFormParams.append(\"file\", file);\n                }\n                if (model !== undefined) {\n                    localVarFormParams.append(\"model\", model);\n                }\n                if (prompt !== undefined) {\n                    localVarFormParams.append(\"prompt\", prompt);\n                }\n                if (responseFormat !== undefined) {\n                    localVarFormParams.append(\"response_format\", responseFormat);\n                }\n                if (temperature !== undefined) {\n                    localVarFormParams.append(\"temperature\", temperature);\n                }\n                if (language !== undefined) {\n                    localVarFormParams.append(\"language\", language);\n                }\n                localVarHeaderParameter[\"Content-Type\"] = \"multipart/form-data\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = localVarFormParams;\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Translates audio into into English.\n         * @param {File} file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.\n         * @param {string} [prompt] An optional text to guide the model\\\\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.\n         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createTranslation: (file, model, prompt, responseFormat, temperature, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'file' is not null or undefined\n                common_1.assertParamExists(\"createTranslation\", \"file\", file);\n                // verify required parameter 'model' is not null or undefined\n                common_1.assertParamExists(\"createTranslation\", \"model\", model);\n                const localVarPath = `/audio/translations`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"POST\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n                if (file !== undefined) {\n                    localVarFormParams.append(\"file\", file);\n                }\n                if (model !== undefined) {\n                    localVarFormParams.append(\"model\", model);\n                }\n                if (prompt !== undefined) {\n                    localVarFormParams.append(\"prompt\", prompt);\n                }\n                if (responseFormat !== undefined) {\n                    localVarFormParams.append(\"response_format\", responseFormat);\n                }\n                if (temperature !== undefined) {\n                    localVarFormParams.append(\"temperature\", temperature);\n                }\n                localVarHeaderParameter[\"Content-Type\"] = \"multipart/form-data\";\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n                localVarRequestOptions.data = localVarFormParams;\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Delete a file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteFile: (fileId, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'fileId' is not null or undefined\n                common_1.assertParamExists(\"deleteFile\", \"fileId\", fileId);\n                const localVarPath = `/files/{file_id}`.replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId)));\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"DELETE\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n         * @param {string} model The model to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteModel: (model, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'model' is not null or undefined\n                common_1.assertParamExists(\"deleteModel\", \"model\", model);\n                const localVarPath = `/models/{model}`.replace(`{${\"model\"}}`, encodeURIComponent(String(model)));\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"DELETE\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Returns the contents of the specified file\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ downloadFile: (fileId, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'fileId' is not null or undefined\n                common_1.assertParamExists(\"downloadFile\", \"fileId\", fileId);\n                const localVarPath = `/files/{file_id}/content`.replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId)));\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"GET\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ listEngines: (options = {})=>__awaiter(this, void 0, void 0, function*() {\n                const localVarPath = `/engines`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"GET\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Returns a list of files that belong to the user\\'s organization.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listFiles: (options = {})=>__awaiter(this, void 0, void 0, function*() {\n                const localVarPath = `/files`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"GET\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Get fine-grained status updates for a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listFineTuneEvents: (fineTuneId, stream, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'fineTuneId' is not null or undefined\n                common_1.assertParamExists(\"listFineTuneEvents\", \"fineTuneId\", fineTuneId);\n                const localVarPath = `/fine-tunes/{fine_tune_id}/events`.replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId)));\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"GET\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                if (stream !== undefined) {\n                    localVarQueryParameter[\"stream\"] = stream;\n                }\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary List your organization\\'s fine-tuning jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listFineTunes: (options = {})=>__awaiter(this, void 0, void 0, function*() {\n                const localVarPath = `/fine-tunes`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"GET\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listModels: (options = {})=>__awaiter(this, void 0, void 0, function*() {\n                const localVarPath = `/models`;\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"GET\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n         * @param {string} engineId The ID of the engine to use for this request\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ retrieveEngine: (engineId, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'engineId' is not null or undefined\n                common_1.assertParamExists(\"retrieveEngine\", \"engineId\", engineId);\n                const localVarPath = `/engines/{engine_id}`.replace(`{${\"engine_id\"}}`, encodeURIComponent(String(engineId)));\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"GET\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Returns information about a specific file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ retrieveFile: (fileId, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'fileId' is not null or undefined\n                common_1.assertParamExists(\"retrieveFile\", \"fileId\", fileId);\n                const localVarPath = `/files/{file_id}`.replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId)));\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"GET\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {string} fineTuneId The ID of the fine-tune job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ retrieveFineTune: (fineTuneId, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'fineTuneId' is not null or undefined\n                common_1.assertParamExists(\"retrieveFineTune\", \"fineTuneId\", fineTuneId);\n                const localVarPath = `/fine-tunes/{fine_tune_id}`.replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId)));\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"GET\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            }),\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n         * @param {string} model The ID of the model to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ retrieveModel: (model, options = {})=>__awaiter(this, void 0, void 0, function*() {\n                // verify required parameter 'model' is not null or undefined\n                common_1.assertParamExists(\"retrieveModel\", \"model\", model);\n                const localVarPath = `/models/{model}`.replace(`{${\"model\"}}`, encodeURIComponent(String(model)));\n                // use dummy base URL string because the URL constructor only accepts absolute URLs.\n                const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n                let baseOptions;\n                if (configuration) {\n                    baseOptions = configuration.baseOptions;\n                }\n                const localVarRequestOptions = Object.assign(Object.assign({\n                    method: \"GET\"\n                }, baseOptions), options);\n                const localVarHeaderParameter = {};\n                const localVarQueryParameter = {};\n                common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                return {\n                    url: common_1.toPathString(localVarUrlObj),\n                    options: localVarRequestOptions\n                };\n            })\n    };\n};\n/**\n * OpenAIApi - functional programming interface\n * @export\n */ exports.OpenAIApiFp = function(configuration) {\n    const localVarAxiosParamCreator = exports.OpenAIApiAxiosParamCreator(configuration);\n    return {\n        /**\n         *\n         * @summary Immediately cancel a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to cancel\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ cancelFineTune (fineTuneId, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelFineTune(fineTuneId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n         * @param {CreateAnswerRequest} createAnswerRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ createAnswer (createAnswerRequest, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAnswer(createAnswerRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a model response for the given chat conversation.\n         * @param {CreateChatCompletionRequest} createChatCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createChatCompletion (createChatCompletionRequest, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createChatCompletion(createChatCompletionRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n         * @param {CreateClassificationRequest} createClassificationRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ createClassification (createClassificationRequest, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createClassification(createClassificationRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a completion for the provided prompt and parameters.\n         * @param {CreateCompletionRequest} createCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createCompletion (createCompletionRequest, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createCompletion(createCompletionRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a new edit for the provided input, instruction, and parameters.\n         * @param {CreateEditRequest} createEditRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createEdit (createEditRequest, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEdit(createEditRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates an embedding vector representing the input text.\n         * @param {CreateEmbeddingRequest} createEmbeddingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createEmbedding (createEmbeddingRequest, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEmbedding(createEmbeddingRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n         * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createFile (file, purpose, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFile(file, purpose, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {CreateFineTuneRequest} createFineTuneRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createFineTune (createFineTuneRequest, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFineTune(createFineTuneRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates an image given a prompt.\n         * @param {CreateImageRequest} createImageRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createImage (createImageRequest, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createImage(createImageRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates an edited or extended image given an original image and a prompt.\n         * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.\n         * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n         * @param {File} [mask] An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createImageEdit (image, prompt, mask, n, size, responseFormat, user, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createImageEdit(image, prompt, mask, n, size, responseFormat, user, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a variation of a given image.\n         * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createImageVariation (image, n, size, responseFormat, user, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createImageVariation(image, n, size, responseFormat, user, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Classifies if text violates OpenAI\\'s Content Policy\n         * @param {CreateModerationRequest} createModerationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createModeration (createModerationRequest, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModeration(createModerationRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n         * @param {CreateSearchRequest} createSearchRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ createSearch (engineId, createSearchRequest, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSearch(engineId, createSearchRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Transcribes audio into the input language.\n         * @param {File} file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.\n         * @param {string} [prompt] An optional text to guide the model\\\\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.\n         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n         * @param {string} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createTranscription (file, model, prompt, responseFormat, temperature, language, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createTranscription(file, model, prompt, responseFormat, temperature, language, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Translates audio into into English.\n         * @param {File} file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.\n         * @param {string} [prompt] An optional text to guide the model\\\\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.\n         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createTranslation (file, model, prompt, responseFormat, temperature, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createTranslation(file, model, prompt, responseFormat, temperature, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Delete a file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteFile (fileId, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFile(fileId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n         * @param {string} model The model to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteModel (model, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModel(model, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns the contents of the specified file\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ downloadFile (fileId, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.downloadFile(fileId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ listEngines (options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listEngines(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns a list of files that belong to the user\\'s organization.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listFiles (options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFiles(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Get fine-grained status updates for a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listFineTuneEvents (fineTuneId, stream, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTuneEvents(fineTuneId, stream, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary List your organization\\'s fine-tuning jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listFineTunes (options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTunes(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listModels (options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModels(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n         * @param {string} engineId The ID of the engine to use for this request\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ retrieveEngine (engineId, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveEngine(engineId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns information about a specific file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ retrieveFile (fileId, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFile(fileId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {string} fineTuneId The ID of the fine-tune job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ retrieveFineTune (fineTuneId, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFineTune(fineTuneId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n         * @param {string} model The ID of the model to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ retrieveModel (model, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveModel(model, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        }\n    };\n};\n/**\n * OpenAIApi - factory interface\n * @export\n */ exports.OpenAIApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = exports.OpenAIApiFp(configuration);\n    return {\n        /**\n         *\n         * @summary Immediately cancel a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to cancel\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ cancelFineTune (fineTuneId, options) {\n            return localVarFp.cancelFineTune(fineTuneId, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n         * @param {CreateAnswerRequest} createAnswerRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ createAnswer (createAnswerRequest, options) {\n            return localVarFp.createAnswer(createAnswerRequest, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a model response for the given chat conversation.\n         * @param {CreateChatCompletionRequest} createChatCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createChatCompletion (createChatCompletionRequest, options) {\n            return localVarFp.createChatCompletion(createChatCompletionRequest, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n         * @param {CreateClassificationRequest} createClassificationRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ createClassification (createClassificationRequest, options) {\n            return localVarFp.createClassification(createClassificationRequest, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a completion for the provided prompt and parameters.\n         * @param {CreateCompletionRequest} createCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createCompletion (createCompletionRequest, options) {\n            return localVarFp.createCompletion(createCompletionRequest, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a new edit for the provided input, instruction, and parameters.\n         * @param {CreateEditRequest} createEditRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createEdit (createEditRequest, options) {\n            return localVarFp.createEdit(createEditRequest, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates an embedding vector representing the input text.\n         * @param {CreateEmbeddingRequest} createEmbeddingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createEmbedding (createEmbeddingRequest, options) {\n            return localVarFp.createEmbedding(createEmbeddingRequest, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n         * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createFile (file, purpose, options) {\n            return localVarFp.createFile(file, purpose, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {CreateFineTuneRequest} createFineTuneRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createFineTune (createFineTuneRequest, options) {\n            return localVarFp.createFineTune(createFineTuneRequest, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates an image given a prompt.\n         * @param {CreateImageRequest} createImageRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createImage (createImageRequest, options) {\n            return localVarFp.createImage(createImageRequest, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates an edited or extended image given an original image and a prompt.\n         * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.\n         * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n         * @param {File} [mask] An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createImageEdit (image, prompt, mask, n, size, responseFormat, user, options) {\n            return localVarFp.createImageEdit(image, prompt, mask, n, size, responseFormat, user, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a variation of a given image.\n         * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createImageVariation (image, n, size, responseFormat, user, options) {\n            return localVarFp.createImageVariation(image, n, size, responseFormat, user, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Classifies if text violates OpenAI\\'s Content Policy\n         * @param {CreateModerationRequest} createModerationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createModeration (createModerationRequest, options) {\n            return localVarFp.createModeration(createModerationRequest, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n         * @param {CreateSearchRequest} createSearchRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ createSearch (engineId, createSearchRequest, options) {\n            return localVarFp.createSearch(engineId, createSearchRequest, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Transcribes audio into the input language.\n         * @param {File} file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.\n         * @param {string} [prompt] An optional text to guide the model\\\\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.\n         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n         * @param {string} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createTranscription (file, model, prompt, responseFormat, temperature, language, options) {\n            return localVarFp.createTranscription(file, model, prompt, responseFormat, temperature, language, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Translates audio into into English.\n         * @param {File} file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.\n         * @param {string} [prompt] An optional text to guide the model\\\\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.\n         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ createTranslation (file, model, prompt, responseFormat, temperature, options) {\n            return localVarFp.createTranslation(file, model, prompt, responseFormat, temperature, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Delete a file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteFile (fileId, options) {\n            return localVarFp.deleteFile(fileId, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n         * @param {string} model The model to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ deleteModel (model, options) {\n            return localVarFp.deleteModel(model, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns the contents of the specified file\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ downloadFile (fileId, options) {\n            return localVarFp.downloadFile(fileId, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ listEngines (options) {\n            return localVarFp.listEngines(options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns a list of files that belong to the user\\'s organization.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listFiles (options) {\n            return localVarFp.listFiles(options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Get fine-grained status updates for a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listFineTuneEvents (fineTuneId, stream, options) {\n            return localVarFp.listFineTuneEvents(fineTuneId, stream, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary List your organization\\'s fine-tuning jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listFineTunes (options) {\n            return localVarFp.listFineTunes(options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ listModels (options) {\n            return localVarFp.listModels(options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n         * @param {string} engineId The ID of the engine to use for this request\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */ retrieveEngine (engineId, options) {\n            return localVarFp.retrieveEngine(engineId, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns information about a specific file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ retrieveFile (fileId, options) {\n            return localVarFp.retrieveFile(fileId, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {string} fineTuneId The ID of the fine-tune job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ retrieveFineTune (fineTuneId, options) {\n            return localVarFp.retrieveFineTune(fineTuneId, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n         * @param {string} model The ID of the model to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */ retrieveModel (model, options) {\n            return localVarFp.retrieveModel(model, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\n/**\n * OpenAIApi - object-oriented interface\n * @export\n * @class OpenAIApi\n * @extends {BaseAPI}\n */ class OpenAIApi extends base_1.BaseAPI {\n    /**\n     *\n     * @summary Immediately cancel a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ cancelFineTune(fineTuneId, options) {\n        return exports.OpenAIApiFp(this.configuration).cancelFineTune(fineTuneId, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n     * @param {CreateAnswerRequest} createAnswerRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createAnswer(createAnswerRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createAnswer(createAnswerRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a model response for the given chat conversation.\n     * @param {CreateChatCompletionRequest} createChatCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createChatCompletion(createChatCompletionRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createChatCompletion(createChatCompletionRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n     * @param {CreateClassificationRequest} createClassificationRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createClassification(createClassificationRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createClassification(createClassificationRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a completion for the provided prompt and parameters.\n     * @param {CreateCompletionRequest} createCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createCompletion(createCompletionRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createCompletion(createCompletionRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a new edit for the provided input, instruction, and parameters.\n     * @param {CreateEditRequest} createEditRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createEdit(createEditRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createEdit(createEditRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates an embedding vector representing the input text.\n     * @param {CreateEmbeddingRequest} createEmbeddingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createEmbedding(createEmbeddingRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createEmbedding(createEmbeddingRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n     * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n     * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createFile(file, purpose, options) {\n        return exports.OpenAIApiFp(this.configuration).createFile(file, purpose, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {CreateFineTuneRequest} createFineTuneRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createFineTune(createFineTuneRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createFineTune(createFineTuneRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates an image given a prompt.\n     * @param {CreateImageRequest} createImageRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createImage(createImageRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createImage(createImageRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates an edited or extended image given an original image and a prompt.\n     * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.\n     * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n     * @param {File} [mask] An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createImageEdit(image, prompt, mask, n, size, responseFormat, user, options) {\n        return exports.OpenAIApiFp(this.configuration).createImageEdit(image, prompt, mask, n, size, responseFormat, user, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a variation of a given image.\n     * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createImageVariation(image, n, size, responseFormat, user, options) {\n        return exports.OpenAIApiFp(this.configuration).createImageVariation(image, n, size, responseFormat, user, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Classifies if text violates OpenAI\\'s Content Policy\n     * @param {CreateModerationRequest} createModerationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createModeration(createModerationRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createModeration(createModerationRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n     * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n     * @param {CreateSearchRequest} createSearchRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createSearch(engineId, createSearchRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createSearch(engineId, createSearchRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Transcribes audio into the input language.\n     * @param {File} file The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n     * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.\n     * @param {string} [prompt] An optional text to guide the model\\\\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.\n     * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n     * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n     * @param {string} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createTranscription(file, model, prompt, responseFormat, temperature, language, options) {\n        return exports.OpenAIApiFp(this.configuration).createTranscription(file, model, prompt, responseFormat, temperature, language, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Translates audio into into English.\n     * @param {File} file The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n     * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.\n     * @param {string} [prompt] An optional text to guide the model\\\\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.\n     * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n     * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ createTranslation(file, model, prompt, responseFormat, temperature, options) {\n        return exports.OpenAIApiFp(this.configuration).createTranslation(file, model, prompt, responseFormat, temperature, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Delete a file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ deleteFile(fileId, options) {\n        return exports.OpenAIApiFp(this.configuration).deleteFile(fileId, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n     * @param {string} model The model to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ deleteModel(model, options) {\n        return exports.OpenAIApiFp(this.configuration).deleteModel(model, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns the contents of the specified file\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ downloadFile(fileId, options) {\n        return exports.OpenAIApiFp(this.configuration).downloadFile(fileId, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ listEngines(options) {\n        return exports.OpenAIApiFp(this.configuration).listEngines(options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns a list of files that belong to the user\\'s organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ listFiles(options) {\n        return exports.OpenAIApiFp(this.configuration).listFiles(options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Get fine-grained status updates for a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n     * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ listFineTuneEvents(fineTuneId, stream, options) {\n        return exports.OpenAIApiFp(this.configuration).listFineTuneEvents(fineTuneId, stream, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary List your organization\\'s fine-tuning jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ listFineTunes(options) {\n        return exports.OpenAIApiFp(this.configuration).listFineTunes(options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ listModels(options) {\n        return exports.OpenAIApiFp(this.configuration).listModels(options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n     * @param {string} engineId The ID of the engine to use for this request\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ retrieveEngine(engineId, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveEngine(engineId, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns information about a specific file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ retrieveFile(fileId, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveFile(fileId, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {string} fineTuneId The ID of the fine-tune job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ retrieveFineTune(fineTuneId, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveFineTune(fineTuneId, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n     * @param {string} model The ID of the model to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */ retrieveModel(model, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveModel(model, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.OpenAIApi = OpenAIApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/dist/api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/dist/base.js":
/*!******************************************!*\
  !*** ./node_modules/openai/dist/base.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * OpenAI API\n * APIs for sampling from and fine-tuning language models\n *\n * The version of the OpenAPI document: 1.3.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;\nconst axios_1 = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/openai/node_modules/axios/index.js\");\nexports.BASE_PATH = \"https://api.openai.com/v1\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */ exports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\t\",\n    pipes: \"|\"\n};\n/**\n *\n * @export\n * @class BaseAPI\n */ class BaseAPI {\n    constructor(configuration, basePath = exports.BASE_PATH, axios = axios_1.default){\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n}\nexports.BaseAPI = BaseAPI;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */ class RequiredError extends Error {\n    constructor(field, msg){\n        super(msg);\n        this.field = field;\n        this.name = \"RequiredError\";\n    }\n}\nexports.RequiredError = RequiredError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2Rpc3QvYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtCQUFrQixHQUNsQixrQkFBa0IsR0FDbEI7Ozs7Ozs7Ozs7Q0FVQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUdBLGVBQWUsR0FBR0EsMEJBQTBCLEdBQUdBLGlCQUFpQixHQUFHLEtBQUs7QUFDaEcsTUFBTU0sVUFBVUMsbUJBQU9BLENBQUMsc0VBQU87QUFDL0JQLGlCQUFpQixHQUFHLDRCQUE0QlEsT0FBTyxDQUFDLFFBQVE7QUFDaEU7OztDQUdDLEdBQ0RSLDBCQUEwQixHQUFHO0lBQ3pCUyxLQUFLO0lBQ0xDLEtBQUs7SUFDTEMsS0FBSztJQUNMQyxPQUFPO0FBQ1g7QUFDQTs7OztDQUlDLEdBQ0QsTUFBTVQ7SUFDRlUsWUFBWUMsYUFBYSxFQUFFQyxXQUFXZixRQUFRSyxTQUFTLEVBQUVXLFFBQVFWLFFBQVFXLE9BQU8sQ0FBRTtRQUM5RSxJQUFJLENBQUNGLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO1FBQ2IsSUFBSUYsZUFBZTtZQUNmLElBQUksQ0FBQ0EsYUFBYSxHQUFHQTtZQUNyQixJQUFJLENBQUNDLFFBQVEsR0FBR0QsY0FBY0MsUUFBUSxJQUFJLElBQUksQ0FBQ0EsUUFBUTtRQUMzRDtJQUNKO0FBQ0o7QUFDQWYsZUFBZSxHQUFHRztBQUVsQjs7Ozs7Q0FLQyxHQUNELE1BQU1ELHNCQUFzQmdCO0lBQ3hCTCxZQUFZTSxLQUFLLEVBQUVDLEdBQUcsQ0FBRTtRQUNwQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDRCxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDRSxJQUFJLEdBQUc7SUFDaEI7QUFDSjtBQUNBckIscUJBQXFCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvZGlzdC9iYXNlLmpzP2FkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogT3BlbkFJIEFQSVxuICogQVBJcyBmb3Igc2FtcGxpbmcgZnJvbSBhbmQgZmluZS10dW5pbmcgbGFuZ3VhZ2UgbW9kZWxzXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDEuMy4wXG4gKlxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZXF1aXJlZEVycm9yID0gZXhwb3J0cy5CYXNlQVBJID0gZXhwb3J0cy5DT0xMRUNUSU9OX0ZPUk1BVFMgPSBleHBvcnRzLkJBU0VfUEFUSCA9IHZvaWQgMDtcbmNvbnN0IGF4aW9zXzEgPSByZXF1aXJlKFwiYXhpb3NcIik7XG5leHBvcnRzLkJBU0VfUEFUSCA9IFwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MVwiLnJlcGxhY2UoL1xcLyskLywgXCJcIik7XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMuQ09MTEVDVElPTl9GT1JNQVRTID0ge1xuICAgIGNzdjogXCIsXCIsXG4gICAgc3N2OiBcIiBcIixcbiAgICB0c3Y6IFwiXFx0XCIsXG4gICAgcGlwZXM6IFwifFwiLFxufTtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBCYXNlQVBJXG4gKi9cbmNsYXNzIEJhc2VBUEkge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ3VyYXRpb24sIGJhc2VQYXRoID0gZXhwb3J0cy5CQVNFX1BBVEgsIGF4aW9zID0gYXhpb3NfMS5kZWZhdWx0KSB7XG4gICAgICAgIHRoaXMuYmFzZVBhdGggPSBiYXNlUGF0aDtcbiAgICAgICAgdGhpcy5heGlvcyA9IGF4aW9zO1xuICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uID0gY29uZmlndXJhdGlvbjtcbiAgICAgICAgICAgIHRoaXMuYmFzZVBhdGggPSBjb25maWd1cmF0aW9uLmJhc2VQYXRoIHx8IHRoaXMuYmFzZVBhdGg7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkJhc2VBUEkgPSBCYXNlQVBJO1xuO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIFJlcXVpcmVkRXJyb3JcbiAqIEBleHRlbmRzIHtFcnJvcn1cbiAqL1xuY2xhc3MgUmVxdWlyZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZCwgbXNnKSB7XG4gICAgICAgIHN1cGVyKG1zZyk7XG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJSZXF1aXJlZEVycm9yXCI7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1aXJlZEVycm9yID0gUmVxdWlyZWRFcnJvcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJlcXVpcmVkRXJyb3IiLCJCYXNlQVBJIiwiQ09MTEVDVElPTl9GT1JNQVRTIiwiQkFTRV9QQVRIIiwiYXhpb3NfMSIsInJlcXVpcmUiLCJyZXBsYWNlIiwiY3N2Iiwic3N2IiwidHN2IiwicGlwZXMiLCJjb25zdHJ1Y3RvciIsImNvbmZpZ3VyYXRpb24iLCJiYXNlUGF0aCIsImF4aW9zIiwiZGVmYXVsdCIsIkVycm9yIiwiZmllbGQiLCJtc2ciLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/dist/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/dist/common.js":
/*!********************************************!*\
  !*** ./node_modules/openai/dist/common.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * OpenAI API\n * APIs for sampling from and fine-tuning language models\n *\n * The version of the OpenAPI document: 1.3.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;\nconst base_1 = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/openai/dist/base.js\");\n/**\n *\n * @export\n */ exports.DUMMY_BASE_URL = \"https://example.com\";\n/**\n *\n * @throws {RequiredError}\n * @export\n */ exports.assertParamExists = function(functionName, paramName, paramValue) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n};\n/**\n *\n * @export\n */ exports.setApiKeyToObject = function(object, keyParamName, configuration) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (configuration && configuration.apiKey) {\n            const localVarApiKeyValue = typeof configuration.apiKey === \"function\" ? yield configuration.apiKey(keyParamName) : yield configuration.apiKey;\n            object[keyParamName] = localVarApiKeyValue;\n        }\n    });\n};\n/**\n *\n * @export\n */ exports.setBasicAuthToObject = function(object, configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = {\n            username: configuration.username,\n            password: configuration.password\n        };\n    }\n};\n/**\n *\n * @export\n */ exports.setBearerAuthToObject = function(object, configuration) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (configuration && configuration.accessToken) {\n            const accessToken = typeof configuration.accessToken === \"function\" ? yield configuration.accessToken() : yield configuration.accessToken;\n            object[\"Authorization\"] = \"Bearer \" + accessToken;\n        }\n    });\n};\n/**\n *\n * @export\n */ exports.setOAuthToObject = function(object, name, scopes, configuration) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (configuration && configuration.accessToken) {\n            const localVarAccessTokenValue = typeof configuration.accessToken === \"function\" ? yield configuration.accessToken(name, scopes) : yield configuration.accessToken;\n            object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n        }\n    });\n};\nfunction setFlattenedQueryParams(urlSearchParams, parameter, key = \"\") {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            parameter.forEach((item)=>setFlattenedQueryParams(urlSearchParams, item, key));\n        } else {\n            Object.keys(parameter).forEach((currentKey)=>setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== \"\" ? \".\" : \"\"}${currentKey}`));\n        }\n    } else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n/**\n *\n * @export\n */ exports.setSearchParams = function(url, ...objects) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n};\n/**\n *\n * @export\n */ exports.serializeDataIfNeeded = function(value, requestOptions, configuration) {\n    const nonString = typeof value !== \"string\";\n    const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers[\"Content-Type\"]) : nonString;\n    return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || \"\";\n};\n/**\n *\n * @export\n */ exports.toPathString = function(url) {\n    return url.pathname + url.search + url.hash;\n};\n/**\n *\n * @export\n */ exports.createRequestFunction = function(axiosArgs, globalAxios, BASE_PATH, configuration) {\n    return (axios = globalAxios, basePath = BASE_PATH)=>{\n        const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), {\n            url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + axiosArgs.url\n        });\n        return axios.request(axiosRequestArgs);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/dist/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/dist/configuration.js":
/*!***************************************************!*\
  !*** ./node_modules/openai/dist/configuration.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * OpenAI API\n * APIs for sampling from and fine-tuning language models\n *\n * The version of the OpenAPI document: 1.3.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Configuration = void 0;\nconst packageJson = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/openai/package.json\");\nclass Configuration {\n    constructor(param = {}){\n        this.apiKey = param.apiKey;\n        this.organization = param.organization;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n        if (!this.baseOptions) {\n            this.baseOptions = {};\n        }\n        this.baseOptions.headers = Object.assign({\n            \"User-Agent\": `OpenAI/NodeJS/${packageJson.version}`,\n            \"Authorization\": `Bearer ${this.apiKey}`\n        }, this.baseOptions.headers);\n        if (this.organization) {\n            this.baseOptions.headers[\"OpenAI-Organization\"] = this.organization;\n        }\n        if (!this.formDataCtor) {\n            this.formDataCtor = __webpack_require__(/*! form-data */ \"(rsc)/./node_modules/openai/node_modules/form-data/lib/form_data.js\");\n        }\n    }\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */ isJsonMime(mime) {\n        const jsonMime = new RegExp(\"^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$\", \"i\");\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === \"application/json-patch+json\");\n    }\n}\nexports.Configuration = Configuration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2Rpc3QvY29uZmlndXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtCQUFrQixHQUNsQixrQkFBa0IsR0FDbEI7Ozs7Ozs7Ozs7Q0FVQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQyxpRUFBaUI7QUFDN0MsTUFBTUY7SUFDRkcsWUFBWUMsUUFBUSxDQUFDLENBQUMsQ0FBRTtRQUNwQixJQUFJLENBQUNDLE1BQU0sR0FBR0QsTUFBTUMsTUFBTTtRQUMxQixJQUFJLENBQUNDLFlBQVksR0FBR0YsTUFBTUUsWUFBWTtRQUN0QyxJQUFJLENBQUNDLFFBQVEsR0FBR0gsTUFBTUcsUUFBUTtRQUM5QixJQUFJLENBQUNDLFFBQVEsR0FBR0osTUFBTUksUUFBUTtRQUM5QixJQUFJLENBQUNDLFdBQVcsR0FBR0wsTUFBTUssV0FBVztRQUNwQyxJQUFJLENBQUNDLFFBQVEsR0FBR04sTUFBTU0sUUFBUTtRQUM5QixJQUFJLENBQUNDLFdBQVcsR0FBR1AsTUFBTU8sV0FBVztRQUNwQyxJQUFJLENBQUNDLFlBQVksR0FBR1IsTUFBTVEsWUFBWTtRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDRCxXQUFXLEVBQUU7WUFDbkIsSUFBSSxDQUFDQSxXQUFXLEdBQUcsQ0FBQztRQUN4QjtRQUNBLElBQUksQ0FBQ0EsV0FBVyxDQUFDRSxPQUFPLEdBQUdqQixPQUFPa0IsTUFBTSxDQUFDO1lBQUUsY0FBYyxDQUFDLGNBQWMsRUFBRWIsWUFBWWMsT0FBTyxDQUFDLENBQUM7WUFBRSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDVixNQUFNLENBQUMsQ0FBQztRQUFDLEdBQUcsSUFBSSxDQUFDTSxXQUFXLENBQUNFLE9BQU87UUFDckssSUFBSSxJQUFJLENBQUNQLFlBQVksRUFBRTtZQUNuQixJQUFJLENBQUNLLFdBQVcsQ0FBQ0UsT0FBTyxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQ1AsWUFBWTtRQUN2RTtRQUNBLElBQUksQ0FBQyxJQUFJLENBQUNNLFlBQVksRUFBRTtZQUNwQixJQUFJLENBQUNBLFlBQVksR0FBR1YsbUJBQU9BLENBQUMsc0ZBQVc7UUFDM0M7SUFDSjtJQUNBOzs7Ozs7Ozs7S0FTQyxHQUNEYyxXQUFXQyxJQUFJLEVBQUU7UUFDYixNQUFNQyxXQUFXLElBQUlDLE9BQU8sNERBQWlFO1FBQzdGLE9BQU9GLFNBQVMsUUFBU0MsQ0FBQUEsU0FBU0UsSUFBSSxDQUFDSCxTQUFTQSxLQUFLSSxXQUFXLE9BQU8sNkJBQTRCO0lBQ3ZHO0FBQ0o7QUFDQXZCLHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL0NoYXRBcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2Rpc3QvY29uZmlndXJhdGlvbi5qcz83ODJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAqIE9wZW5BSSBBUElcbiAqIEFQSXMgZm9yIHNhbXBsaW5nIGZyb20gYW5kIGZpbmUtdHVuaW5nIGxhbmd1YWdlIG1vZGVsc1xuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAxLjMuMFxuICpcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29uZmlndXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHBhY2thZ2VKc29uID0gcmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKTtcbmNsYXNzIENvbmZpZ3VyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtID0ge30pIHtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBwYXJhbS5hcGlLZXk7XG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uID0gcGFyYW0ub3JnYW5pemF0aW9uO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gcGFyYW0udXNlcm5hbWU7XG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSBwYXJhbS5wYXNzd29yZDtcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHBhcmFtLmFjY2Vzc1Rva2VuO1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gcGFyYW0uYmFzZVBhdGg7XG4gICAgICAgIHRoaXMuYmFzZU9wdGlvbnMgPSBwYXJhbS5iYXNlT3B0aW9ucztcbiAgICAgICAgdGhpcy5mb3JtRGF0YUN0b3IgPSBwYXJhbS5mb3JtRGF0YUN0b3I7XG4gICAgICAgIGlmICghdGhpcy5iYXNlT3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5iYXNlT3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFzZU9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oeyAnVXNlci1BZ2VudCc6IGBPcGVuQUkvTm9kZUpTLyR7cGFja2FnZUpzb24udmVyc2lvbn1gLCAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLmFwaUtleX1gIH0sIHRoaXMuYmFzZU9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIGlmICh0aGlzLm9yZ2FuaXphdGlvbikge1xuICAgICAgICAgICAgdGhpcy5iYXNlT3B0aW9ucy5oZWFkZXJzWydPcGVuQUktT3JnYW5pemF0aW9uJ10gPSB0aGlzLm9yZ2FuaXphdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuZm9ybURhdGFDdG9yKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhQ3RvciA9IHJlcXVpcmUoXCJmb3JtLWRhdGFcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIE1JTUUgaXMgYSBKU09OIE1JTUUuXG4gICAgICogSlNPTiBNSU1FIGV4YW1wbGVzOlxuICAgICAqICAgYXBwbGljYXRpb24vanNvblxuICAgICAqICAgYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEY4XG4gICAgICogICBBUFBMSUNBVElPTi9KU09OXG4gICAgICogICBhcHBsaWNhdGlvbi92bmQuY29tcGFueStqc29uXG4gICAgICogQHBhcmFtIG1pbWUgLSBNSU1FIChNdWx0aXB1cnBvc2UgSW50ZXJuZXQgTWFpbCBFeHRlbnNpb25zKVxuICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZ2l2ZW4gTUlNRSBpcyBKU09OLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgaXNKc29uTWltZShtaW1lKSB7XG4gICAgICAgIGNvbnN0IGpzb25NaW1lID0gbmV3IFJlZ0V4cCgnXihhcHBsaWNhdGlvblxcL2pzb258W147LyBcXHRdK1xcL1teOy8gXFx0XStbK11qc29uKVsgXFx0XSooOy4qKT8kJywgJ2knKTtcbiAgICAgICAgcmV0dXJuIG1pbWUgIT09IG51bGwgJiYgKGpzb25NaW1lLnRlc3QobWltZSkgfHwgbWltZS50b0xvd2VyQ2FzZSgpID09PSAnYXBwbGljYXRpb24vanNvbi1wYXRjaCtqc29uJyk7XG4gICAgfVxufVxuZXhwb3J0cy5Db25maWd1cmF0aW9uID0gQ29uZmlndXJhdGlvbjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNvbmZpZ3VyYXRpb24iLCJwYWNrYWdlSnNvbiIsInJlcXVpcmUiLCJjb25zdHJ1Y3RvciIsInBhcmFtIiwiYXBpS2V5Iiwib3JnYW5pemF0aW9uIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImFjY2Vzc1Rva2VuIiwiYmFzZVBhdGgiLCJiYXNlT3B0aW9ucyIsImZvcm1EYXRhQ3RvciIsImhlYWRlcnMiLCJhc3NpZ24iLCJ2ZXJzaW9uIiwiaXNKc29uTWltZSIsIm1pbWUiLCJqc29uTWltZSIsIlJlZ0V4cCIsInRlc3QiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/dist/configuration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/dist/index.js":
/*!*******************************************!*\
  !*** ./node_modules/openai/dist/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * OpenAI API\n * APIs for sampling from and fine-tuning language models\n *\n * The version of the OpenAPI document: 1.3.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !exports1.hasOwnProperty(p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./api */ \"(rsc)/./node_modules/openai/dist/api.js\"), exports);\n__exportStar(__webpack_require__(/*! ./configuration */ \"(rsc)/./node_modules/openai/dist/configuration.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixrQkFBa0IsR0FDbEIsa0JBQWtCLEdBQ2xCOzs7Ozs7Ozs7O0NBVUMsR0FDRCxJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCSixPQUFPTyxjQUFjLENBQUNMLEdBQUdHLElBQUk7UUFBRUcsWUFBWTtRQUFNQyxLQUFLO1lBQWEsT0FBT04sQ0FBQyxDQUFDQyxFQUFFO1FBQUU7SUFBRTtBQUN0RixJQUFNLFNBQVNGLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlNLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1AsQ0FBQyxFQUFFUSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS1QsRUFBRyxJQUFJUyxNQUFNLGFBQWEsQ0FBQ0QsU0FBUUUsY0FBYyxDQUFDRCxJQUFJYixnQkFBZ0JZLFVBQVNSLEdBQUdTO0FBQ3BHO0FBQ0FaLDhDQUE2QztJQUFFYyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdESixhQUFhSyxtQkFBT0EsQ0FBQyxzREFBTyxHQUFHSjtBQUMvQkQsYUFBYUssbUJBQU9BLENBQUMsMEVBQWlCLEdBQUdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvZGlzdC9pbmRleC5qcz9mMzg4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAqIE9wZW5BSSBBUElcbiAqIEFQSXMgZm9yIHNhbXBsaW5nIGZyb20gYW5kIGZpbmUtdHVuaW5nIGxhbmd1YWdlIG1vZGVsc1xuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAxLjMuMFxuICpcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hcGlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbmZpZ3VyYXRpb25cIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsInZhbHVlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./lib/axios */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/axios.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLHNIQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL0NoYXRBcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcz9iODUxIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/adapters/http.js":
/*!*********************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/adapters/http.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/settle.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/buildFullPath.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/buildURL.js\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar httpFollow = (__webpack_require__(/*! follow-redirects */ \"(rsc)/./node_modules/follow-redirects/index.js\").http);\nvar httpsFollow = (__webpack_require__(/*! follow-redirects */ \"(rsc)/./node_modules/follow-redirects/index.js\").https);\nvar url = __webpack_require__(/*! url */ \"url\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar VERSION = (__webpack_require__(/*! ./../env/data */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/env/data.js\").version);\nvar createError = __webpack_require__(/*! ../core/createError */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/createError.js\");\nvar enhanceError = __webpack_require__(/*! ../core/enhanceError */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/enhanceError.js\");\nvar transitionalDefaults = __webpack_require__(/*! ../defaults/transitional */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/defaults/transitional.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/Cancel.js\");\nvar isHttps = /https:?/;\n/**\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} proxy\n * @param {string} location\n */ function setProxy(options, proxy, location) {\n    options.hostname = proxy.host;\n    options.host = proxy.host;\n    options.port = proxy.port;\n    options.path = location;\n    // Basic proxy authorization\n    if (proxy.auth) {\n        var base64 = Buffer.from(proxy.auth.username + \":\" + proxy.auth.password, \"utf8\").toString(\"base64\");\n        options.headers[\"Proxy-Authorization\"] = \"Basic \" + base64;\n    }\n    // If a proxy is used, any redirects must also pass through the proxy\n    options.beforeRedirect = function beforeRedirect(redirection) {\n        redirection.headers.host = redirection.host;\n        setProxy(redirection, proxy, redirection.href);\n    };\n}\n/*eslint consistent-return:0*/ module.exports = function httpAdapter(config) {\n    return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n        var onCanceled;\n        function done() {\n            if (config.cancelToken) {\n                config.cancelToken.unsubscribe(onCanceled);\n            }\n            if (config.signal) {\n                config.signal.removeEventListener(\"abort\", onCanceled);\n            }\n        }\n        var resolve = function resolve(value) {\n            done();\n            resolvePromise(value);\n        };\n        var rejected = false;\n        var reject = function reject(value) {\n            done();\n            rejected = true;\n            rejectPromise(value);\n        };\n        var data = config.data;\n        var headers = config.headers;\n        var headerNames = {};\n        Object.keys(headers).forEach(function storeLowerName(name) {\n            headerNames[name.toLowerCase()] = name;\n        });\n        // Set User-Agent (required by some servers)\n        // See https://github.com/axios/axios/issues/69\n        if (\"user-agent\" in headerNames) {\n            // User-Agent is specified; handle case where no UA header is desired\n            if (!headers[headerNames[\"user-agent\"]]) {\n                delete headers[headerNames[\"user-agent\"]];\n            }\n        // Otherwise, use specified value\n        } else {\n            // Only set header if it hasn't been set in config\n            headers[\"User-Agent\"] = \"axios/\" + VERSION;\n        }\n        if (data && !utils.isStream(data)) {\n            if (Buffer.isBuffer(data)) {\n            // Nothing to do...\n            } else if (utils.isArrayBuffer(data)) {\n                data = Buffer.from(new Uint8Array(data));\n            } else if (utils.isString(data)) {\n                data = Buffer.from(data, \"utf-8\");\n            } else {\n                return reject(createError(\"Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream\", config));\n            }\n            if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n                return reject(createError(\"Request body larger than maxBodyLength limit\", config));\n            }\n            // Add Content-Length header if data exists\n            if (!headerNames[\"content-length\"]) {\n                headers[\"Content-Length\"] = data.length;\n            }\n        }\n        // HTTP basic authentication\n        var auth = undefined;\n        if (config.auth) {\n            var username = config.auth.username || \"\";\n            var password = config.auth.password || \"\";\n            auth = username + \":\" + password;\n        }\n        // Parse url\n        var fullPath = buildFullPath(config.baseURL, config.url);\n        var parsed = url.parse(fullPath);\n        var protocol = parsed.protocol || \"http:\";\n        if (!auth && parsed.auth) {\n            var urlAuth = parsed.auth.split(\":\");\n            var urlUsername = urlAuth[0] || \"\";\n            var urlPassword = urlAuth[1] || \"\";\n            auth = urlUsername + \":\" + urlPassword;\n        }\n        if (auth && headerNames.authorization) {\n            delete headers[headerNames.authorization];\n        }\n        var isHttpsRequest = isHttps.test(protocol);\n        var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n        try {\n            buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, \"\");\n        } catch (err) {\n            var customErr = new Error(err.message);\n            customErr.config = config;\n            customErr.url = config.url;\n            customErr.exists = true;\n            reject(customErr);\n        }\n        var options = {\n            path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, \"\"),\n            method: config.method.toUpperCase(),\n            headers: headers,\n            agent: agent,\n            agents: {\n                http: config.httpAgent,\n                https: config.httpsAgent\n            },\n            auth: auth\n        };\n        if (config.socketPath) {\n            options.socketPath = config.socketPath;\n        } else {\n            options.hostname = parsed.hostname;\n            options.port = parsed.port;\n        }\n        var proxy = config.proxy;\n        if (!proxy && proxy !== false) {\n            var proxyEnv = protocol.slice(0, -1) + \"_proxy\";\n            var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n            if (proxyUrl) {\n                var parsedProxyUrl = url.parse(proxyUrl);\n                var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n                var shouldProxy = true;\n                if (noProxyEnv) {\n                    var noProxy = noProxyEnv.split(\",\").map(function trim(s) {\n                        return s.trim();\n                    });\n                    shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n                        if (!proxyElement) {\n                            return false;\n                        }\n                        if (proxyElement === \"*\") {\n                            return true;\n                        }\n                        if (proxyElement[0] === \".\" && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n                            return true;\n                        }\n                        return parsed.hostname === proxyElement;\n                    });\n                }\n                if (shouldProxy) {\n                    proxy = {\n                        host: parsedProxyUrl.hostname,\n                        port: parsedProxyUrl.port,\n                        protocol: parsedProxyUrl.protocol\n                    };\n                    if (parsedProxyUrl.auth) {\n                        var proxyUrlAuth = parsedProxyUrl.auth.split(\":\");\n                        proxy.auth = {\n                            username: proxyUrlAuth[0],\n                            password: proxyUrlAuth[1]\n                        };\n                    }\n                }\n            }\n        }\n        if (proxy) {\n            options.headers.host = parsed.hostname + (parsed.port ? \":\" + parsed.port : \"\");\n            setProxy(options, proxy, protocol + \"//\" + parsed.hostname + (parsed.port ? \":\" + parsed.port : \"\") + options.path);\n        }\n        var transport;\n        var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n        if (config.transport) {\n            transport = config.transport;\n        } else if (config.maxRedirects === 0) {\n            transport = isHttpsProxy ? https : http;\n        } else {\n            if (config.maxRedirects) {\n                options.maxRedirects = config.maxRedirects;\n            }\n            transport = isHttpsProxy ? httpsFollow : httpFollow;\n        }\n        if (config.maxBodyLength > -1) {\n            options.maxBodyLength = config.maxBodyLength;\n        }\n        if (config.insecureHTTPParser) {\n            options.insecureHTTPParser = config.insecureHTTPParser;\n        }\n        // Create the request\n        var req = transport.request(options, function handleResponse(res) {\n            if (req.aborted) return;\n            // uncompress the response body transparently if required\n            var stream = res;\n            // return the last request in case of redirects\n            var lastRequest = res.req || req;\n            // if no content, is HEAD request or decompress disabled we should not decompress\n            if (res.statusCode !== 204 && lastRequest.method !== \"HEAD\" && config.decompress !== false) {\n                switch(res.headers[\"content-encoding\"]){\n                    /*eslint default-case:0*/ case \"gzip\":\n                    case \"compress\":\n                    case \"deflate\":\n                        // add the unzipper to the body stream processing pipeline\n                        stream = stream.pipe(zlib.createUnzip());\n                        // remove the content-encoding in order to not confuse downstream operations\n                        delete res.headers[\"content-encoding\"];\n                        break;\n                }\n            }\n            var response = {\n                status: res.statusCode,\n                statusText: res.statusMessage,\n                headers: res.headers,\n                config: config,\n                request: lastRequest\n            };\n            if (config.responseType === \"stream\") {\n                response.data = stream;\n                settle(resolve, reject, response);\n            } else {\n                var responseBuffer = [];\n                var totalResponseBytes = 0;\n                stream.on(\"data\", function handleStreamData(chunk) {\n                    responseBuffer.push(chunk);\n                    totalResponseBytes += chunk.length;\n                    // make sure the content length is not over the maxContentLength if specified\n                    if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n                        // stream.destoy() emit aborted event before calling reject() on Node.js v16\n                        rejected = true;\n                        stream.destroy();\n                        reject(createError(\"maxContentLength size of \" + config.maxContentLength + \" exceeded\", config, null, lastRequest));\n                    }\n                });\n                stream.on(\"aborted\", function handlerStreamAborted() {\n                    if (rejected) {\n                        return;\n                    }\n                    stream.destroy();\n                    reject(createError(\"error request aborted\", config, \"ERR_REQUEST_ABORTED\", lastRequest));\n                });\n                stream.on(\"error\", function handleStreamError(err) {\n                    if (req.aborted) return;\n                    reject(enhanceError(err, config, null, lastRequest));\n                });\n                stream.on(\"end\", function handleStreamEnd() {\n                    try {\n                        var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n                        if (config.responseType !== \"arraybuffer\") {\n                            responseData = responseData.toString(config.responseEncoding);\n                            if (!config.responseEncoding || config.responseEncoding === \"utf8\") {\n                                responseData = utils.stripBOM(responseData);\n                            }\n                        }\n                        response.data = responseData;\n                    } catch (err) {\n                        reject(enhanceError(err, config, err.code, response.request, response));\n                    }\n                    settle(resolve, reject, response);\n                });\n            }\n        });\n        // Handle errors\n        req.on(\"error\", function handleRequestError(err) {\n            if (req.aborted && err.code !== \"ERR_FR_TOO_MANY_REDIRECTS\") return;\n            reject(enhanceError(err, config, null, req));\n        });\n        // set tcp keep alive to prevent drop connection by peer\n        req.on(\"socket\", function handleRequestSocket(socket) {\n            // default interval of sending ack packet is 1 minute\n            socket.setKeepAlive(true, 1000 * 60);\n        });\n        // Handle request timeout\n        if (config.timeout) {\n            // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n            var timeout = parseInt(config.timeout, 10);\n            if (isNaN(timeout)) {\n                reject(createError(\"error trying to parse `config.timeout` to int\", config, \"ERR_PARSE_TIMEOUT\", req));\n                return;\n            }\n            // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n            // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n            // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n            // And then these socket which be hang up will devoring CPU little by little.\n            // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n            req.setTimeout(timeout, function handleRequestTimeout() {\n                req.abort();\n                var timeoutErrorMessage = \"\";\n                if (config.timeoutErrorMessage) {\n                    timeoutErrorMessage = config.timeoutErrorMessage;\n                } else {\n                    timeoutErrorMessage = \"timeout of \" + config.timeout + \"ms exceeded\";\n                }\n                var transitional = config.transitional || transitionalDefaults;\n                reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? \"ETIMEDOUT\" : \"ECONNABORTED\", req));\n            });\n        }\n        if (config.cancelToken || config.signal) {\n            // Handle cancellation\n            // eslint-disable-next-line func-names\n            onCanceled = function(cancel) {\n                if (req.aborted) return;\n                req.abort();\n                reject(!cancel || cancel && cancel.type ? new Cancel(\"canceled\") : cancel);\n            };\n            config.cancelToken && config.cancelToken.subscribe(onCanceled);\n            if (config.signal) {\n                config.signal.aborted ? onCanceled() : config.signal.addEventListener(\"abort\", onCanceled);\n            }\n        }\n        // Send the request\n        if (utils.isStream(data)) {\n            data.on(\"error\", function handleStreamError(err) {\n                reject(enhanceError(err, config, null, req));\n            }).pipe(req);\n        } else {\n            req.end(data);\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/adapters/http.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/adapters/xhr.js":
/*!********************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/adapters/xhr.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/settle.js\");\nvar cookies = __webpack_require__(/*! ./../helpers/cookies */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/cookies.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/createError.js\");\nvar transitionalDefaults = __webpack_require__(/*! ../defaults/transitional */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/defaults/transitional.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/Cancel.js\");\nmodule.exports = function xhrAdapter(config) {\n    return new Promise(function dispatchXhrRequest(resolve, reject) {\n        var requestData = config.data;\n        var requestHeaders = config.headers;\n        var responseType = config.responseType;\n        var onCanceled;\n        function done() {\n            if (config.cancelToken) {\n                config.cancelToken.unsubscribe(onCanceled);\n            }\n            if (config.signal) {\n                config.signal.removeEventListener(\"abort\", onCanceled);\n            }\n        }\n        if (utils.isFormData(requestData)) {\n            delete requestHeaders[\"Content-Type\"]; // Let the browser set it\n        }\n        var request = new XMLHttpRequest();\n        // HTTP basic authentication\n        if (config.auth) {\n            var username = config.auth.username || \"\";\n            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \"\";\n            requestHeaders.Authorization = \"Basic \" + btoa(username + \":\" + password);\n        }\n        var fullPath = buildFullPath(config.baseURL, config.url);\n        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n        // Set the request timeout in MS\n        request.timeout = config.timeout;\n        function onloadend() {\n            if (!request) {\n                return;\n            }\n            // Prepare the response\n            var responseHeaders = \"getAllResponseHeaders\" in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n            var responseData = !responseType || responseType === \"text\" || responseType === \"json\" ? request.responseText : request.response;\n            var response = {\n                data: responseData,\n                status: request.status,\n                statusText: request.statusText,\n                headers: responseHeaders,\n                config: config,\n                request: request\n            };\n            settle(function _resolve(value) {\n                resolve(value);\n                done();\n            }, function _reject(err) {\n                reject(err);\n                done();\n            }, response);\n            // Clean up request\n            request = null;\n        }\n        if (\"onloadend\" in request) {\n            // Use onloadend if available\n            request.onloadend = onloadend;\n        } else {\n            // Listen for ready state to emulate onloadend\n            request.onreadystatechange = function handleLoad() {\n                if (!request || request.readyState !== 4) {\n                    return;\n                }\n                // The request errored out and we didn't get a response, this will be\n                // handled by onerror instead\n                // With one exception: request that using file: protocol, most browsers\n                // will return status as 0 even though it's a successful request\n                if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\"file:\") === 0)) {\n                    return;\n                }\n                // readystate handler is calling before onerror or ontimeout handlers,\n                // so we should call onloadend on the next 'tick'\n                setTimeout(onloadend);\n            };\n        }\n        // Handle browser request cancellation (as opposed to a manual cancellation)\n        request.onabort = function handleAbort() {\n            if (!request) {\n                return;\n            }\n            reject(createError(\"Request aborted\", config, \"ECONNABORTED\", request));\n            // Clean up request\n            request = null;\n        };\n        // Handle low level network errors\n        request.onerror = function handleError() {\n            // Real errors are hidden from us by the browser\n            // onerror should only fire if it's a network error\n            reject(createError(\"Network Error\", config, null, request));\n            // Clean up request\n            request = null;\n        };\n        // Handle timeout\n        request.ontimeout = function handleTimeout() {\n            var timeoutErrorMessage = config.timeout ? \"timeout of \" + config.timeout + \"ms exceeded\" : \"timeout exceeded\";\n            var transitional = config.transitional || transitionalDefaults;\n            if (config.timeoutErrorMessage) {\n                timeoutErrorMessage = config.timeoutErrorMessage;\n            }\n            reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? \"ETIMEDOUT\" : \"ECONNABORTED\", request));\n            // Clean up request\n            request = null;\n        };\n        // Add xsrf header\n        // This is only done if running in a standard browser environment.\n        // Specifically not if we're in a web worker, or react-native.\n        if (utils.isStandardBrowserEnv()) {\n            // Add xsrf header\n            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;\n            if (xsrfValue) {\n                requestHeaders[config.xsrfHeaderName] = xsrfValue;\n            }\n        }\n        // Add headers to the request\n        if (\"setRequestHeader\" in request) {\n            utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n                if (typeof requestData === \"undefined\" && key.toLowerCase() === \"content-type\") {\n                    // Remove Content-Type if data is undefined\n                    delete requestHeaders[key];\n                } else {\n                    // Otherwise add header to the request\n                    request.setRequestHeader(key, val);\n                }\n            });\n        }\n        // Add withCredentials to request if needed\n        if (!utils.isUndefined(config.withCredentials)) {\n            request.withCredentials = !!config.withCredentials;\n        }\n        // Add responseType to request if needed\n        if (responseType && responseType !== \"json\") {\n            request.responseType = config.responseType;\n        }\n        // Handle progress if needed\n        if (typeof config.onDownloadProgress === \"function\") {\n            request.addEventListener(\"progress\", config.onDownloadProgress);\n        }\n        // Not all browsers support upload events\n        if (typeof config.onUploadProgress === \"function\" && request.upload) {\n            request.upload.addEventListener(\"progress\", config.onUploadProgress);\n        }\n        if (config.cancelToken || config.signal) {\n            // Handle cancellation\n            // eslint-disable-next-line func-names\n            onCanceled = function(cancel) {\n                if (!request) {\n                    return;\n                }\n                reject(!cancel || cancel && cancel.type ? new Cancel(\"canceled\") : cancel);\n                request.abort();\n                request = null;\n            };\n            config.cancelToken && config.cancelToken.subscribe(onCanceled);\n            if (config.signal) {\n                config.signal.aborted ? onCanceled() : config.signal.addEventListener(\"abort\", onCanceled);\n            }\n        }\n        if (!requestData) {\n            requestData = null;\n        }\n        // Send the request\n        request.send(requestData);\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/adapters/xhr.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/axios.js":
/*!*************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/axios.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/bind.js\");\nvar Axios = __webpack_require__(/*! ./core/Axios */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/Axios.js\");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/mergeConfig.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/defaults/index.js\");\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */ function createInstance(defaultConfig) {\n    var context = new Axios(defaultConfig);\n    var instance = bind(Axios.prototype.request, context);\n    // Copy axios.prototype to instance\n    utils.extend(instance, Axios.prototype, context);\n    // Copy context to instance\n    utils.extend(instance, context);\n    // Factory for creating new instances\n    instance.create = function create(instanceConfig) {\n        return createInstance(mergeConfig(defaultConfig, instanceConfig));\n    };\n    return instance;\n}\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/Cancel.js\");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/CancelToken.js\");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/isCancel.js\");\naxios.VERSION = (__webpack_require__(/*! ./env/data */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/env/data.js\").version);\n// Expose all/spread\naxios.all = function all(promises) {\n    return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/spread.js\");\n// Expose isAxiosError\naxios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/isAxiosError.js\");\nmodule.exports = axios;\n// Allow use of default import syntax in TypeScript\nmodule.exports[\"default\"] = axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNuQixJQUFJRSxRQUFRRixtQkFBT0EsQ0FBQztBQUNwQixJQUFJRyxjQUFjSCxtQkFBT0EsQ0FBQztBQUMxQixJQUFJSSxXQUFXSixtQkFBT0EsQ0FBQztBQUV2Qjs7Ozs7Q0FLQyxHQUNELFNBQVNLLGVBQWVDLGFBQWE7SUFDbkMsSUFBSUMsVUFBVSxJQUFJTCxNQUFNSTtJQUN4QixJQUFJRSxXQUFXUCxLQUFLQyxNQUFNTyxTQUFTLENBQUNDLE9BQU8sRUFBRUg7SUFFN0MsbUNBQW1DO0lBQ25DUixNQUFNWSxNQUFNLENBQUNILFVBQVVOLE1BQU1PLFNBQVMsRUFBRUY7SUFFeEMsMkJBQTJCO0lBQzNCUixNQUFNWSxNQUFNLENBQUNILFVBQVVEO0lBRXZCLHFDQUFxQztJQUNyQ0MsU0FBU0ksTUFBTSxHQUFHLFNBQVNBLE9BQU9DLGNBQWM7UUFDOUMsT0FBT1IsZUFBZUYsWUFBWUcsZUFBZU87SUFDbkQ7SUFFQSxPQUFPTDtBQUNUO0FBRUEsNkNBQTZDO0FBQzdDLElBQUlNLFFBQVFULGVBQWVEO0FBRTNCLGdEQUFnRDtBQUNoRFUsTUFBTVosS0FBSyxHQUFHQTtBQUVkLDhCQUE4QjtBQUM5QlksTUFBTUMsTUFBTSxHQUFHZixtQkFBT0EsQ0FBQztBQUN2QmMsTUFBTUUsV0FBVyxHQUFHaEIsbUJBQU9BLENBQUM7QUFDNUJjLE1BQU1HLFFBQVEsR0FBR2pCLG1CQUFPQSxDQUFDO0FBQ3pCYyxNQUFNSSxPQUFPLEdBQUdsQixpSEFBNkI7QUFFN0Msb0JBQW9CO0FBQ3BCYyxNQUFNTSxHQUFHLEdBQUcsU0FBU0EsSUFBSUMsUUFBUTtJQUMvQixPQUFPQyxRQUFRRixHQUFHLENBQUNDO0FBQ3JCO0FBQ0FQLE1BQU1TLE1BQU0sR0FBR3ZCLG1CQUFPQSxDQUFDO0FBRXZCLHNCQUFzQjtBQUN0QmMsTUFBTVUsWUFBWSxHQUFHeEIsbUJBQU9BLENBQUM7QUFFN0J5QixPQUFPQyxPQUFPLEdBQUdaO0FBRWpCLG1EQUFtRDtBQUNuRFcseUJBQXNCLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcz8xMmY4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcbmF4aW9zLlZFUlNJT04gPSByZXF1aXJlKCcuL2Vudi9kYXRhJykudmVyc2lvbjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJiaW5kIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImRlZmF1bHRzIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwicHJvdG90eXBlIiwicmVxdWVzdCIsImV4dGVuZCIsImNyZWF0ZSIsImluc3RhbmNlQ29uZmlnIiwiYXhpb3MiLCJDYW5jZWwiLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiVkVSU0lPTiIsInZlcnNpb24iLCJhbGwiLCJwcm9taXNlcyIsIlByb21pc2UiLCJzcHJlYWQiLCJpc0F4aW9zRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/axios.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/Cancel.js":
/*!*********************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/cancel/Cancel.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */ function Cancel(message) {\n    this.message = message;\n}\nCancel.prototype.toString = function toString() {\n    return \"Cancel\" + (this.message ? \": \" + this.message : \"\");\n};\nCancel.prototype.__CANCEL__ = true;\nmodule.exports = Cancel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOzs7OztDQUtDLEdBQ0QsU0FBU0EsT0FBT0MsT0FBTztJQUNyQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7QUFDakI7QUFFQUQsT0FBT0UsU0FBUyxDQUFDQyxRQUFRLEdBQUcsU0FBU0E7SUFDbkMsT0FBTyxXQUFZLEtBQUksQ0FBQ0YsT0FBTyxHQUFHLE9BQU8sSUFBSSxDQUFDQSxPQUFPLEdBQUcsRUFBQztBQUMzRDtBQUVBRCxPQUFPRSxTQUFTLENBQUNFLFVBQVUsR0FBRztBQUU5QkMsT0FBT0MsT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL0NoYXRBcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcz8xOWYxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIl0sIm5hbWVzIjpbIkNhbmNlbCIsIm1lc3NhZ2UiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsIl9fQ0FOQ0VMX18iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/Cancel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/CancelToken.js":
/*!**************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/cancel/CancelToken.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/Cancel.js\");\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */ function CancelToken(executor) {\n    if (typeof executor !== \"function\") {\n        throw new TypeError(\"executor must be a function.\");\n    }\n    var resolvePromise;\n    this.promise = new Promise(function promiseExecutor(resolve) {\n        resolvePromise = resolve;\n    });\n    var token = this;\n    // eslint-disable-next-line func-names\n    this.promise.then(function(cancel) {\n        if (!token._listeners) return;\n        var i;\n        var l = token._listeners.length;\n        for(i = 0; i < l; i++){\n            token._listeners[i](cancel);\n        }\n        token._listeners = null;\n    });\n    // eslint-disable-next-line func-names\n    this.promise.then = function(onfulfilled) {\n        var _resolve;\n        // eslint-disable-next-line func-names\n        var promise = new Promise(function(resolve) {\n            token.subscribe(resolve);\n            _resolve = resolve;\n        }).then(onfulfilled);\n        promise.cancel = function reject() {\n            token.unsubscribe(_resolve);\n        };\n        return promise;\n    };\n    executor(function cancel(message) {\n        if (token.reason) {\n            // Cancellation has already been requested\n            return;\n        }\n        token.reason = new Cancel(message);\n        resolvePromise(token.reason);\n    });\n}\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {\n    if (this.reason) {\n        throw this.reason;\n    }\n};\n/**\n * Subscribe to the cancel signal\n */ CancelToken.prototype.subscribe = function subscribe(listener) {\n    if (this.reason) {\n        listener(this.reason);\n        return;\n    }\n    if (this._listeners) {\n        this._listeners.push(listener);\n    } else {\n        this._listeners = [\n            listener\n        ];\n    }\n};\n/**\n * Unsubscribe from the cancel signal\n */ CancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n    if (!this._listeners) {\n        return;\n    }\n    var index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n        this._listeners.splice(index, 1);\n    }\n};\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */ CancelToken.source = function source() {\n    var cancel;\n    var token = new CancelToken(function executor(c) {\n        cancel = c;\n    });\n    return {\n        token: token,\n        cancel: cancel\n    };\n};\nmodule.exports = CancelToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFFckI7Ozs7O0NBS0MsR0FDRCxTQUFTQyxZQUFZQyxRQUFRO0lBQzNCLElBQUksT0FBT0EsYUFBYSxZQUFZO1FBQ2xDLE1BQU0sSUFBSUMsVUFBVTtJQUN0QjtJQUVBLElBQUlDO0lBRUosSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSUMsUUFBUSxTQUFTQyxnQkFBZ0JDLE9BQU87UUFDekRKLGlCQUFpQkk7SUFDbkI7SUFFQSxJQUFJQyxRQUFRLElBQUk7SUFFaEIsc0NBQXNDO0lBQ3RDLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxJQUFJLENBQUMsU0FBU0MsTUFBTTtRQUMvQixJQUFJLENBQUNGLE1BQU1HLFVBQVUsRUFBRTtRQUV2QixJQUFJQztRQUNKLElBQUlDLElBQUlMLE1BQU1HLFVBQVUsQ0FBQ0csTUFBTTtRQUUvQixJQUFLRixJQUFJLEdBQUdBLElBQUlDLEdBQUdELElBQUs7WUFDdEJKLE1BQU1HLFVBQVUsQ0FBQ0MsRUFBRSxDQUFDRjtRQUN0QjtRQUNBRixNQUFNRyxVQUFVLEdBQUc7SUFDckI7SUFFQSxzQ0FBc0M7SUFDdEMsSUFBSSxDQUFDUCxPQUFPLENBQUNLLElBQUksR0FBRyxTQUFTTSxXQUFXO1FBQ3RDLElBQUlDO1FBQ0osc0NBQXNDO1FBQ3RDLElBQUlaLFVBQVUsSUFBSUMsUUFBUSxTQUFTRSxPQUFPO1lBQ3hDQyxNQUFNUyxTQUFTLENBQUNWO1lBQ2hCUyxXQUFXVDtRQUNiLEdBQUdFLElBQUksQ0FBQ007UUFFUlgsUUFBUU0sTUFBTSxHQUFHLFNBQVNRO1lBQ3hCVixNQUFNVyxXQUFXLENBQUNIO1FBQ3BCO1FBRUEsT0FBT1o7SUFDVDtJQUVBSCxTQUFTLFNBQVNTLE9BQU9VLE9BQU87UUFDOUIsSUFBSVosTUFBTWEsTUFBTSxFQUFFO1lBQ2hCLDBDQUEwQztZQUMxQztRQUNGO1FBRUFiLE1BQU1hLE1BQU0sR0FBRyxJQUFJdkIsT0FBT3NCO1FBQzFCakIsZUFBZUssTUFBTWEsTUFBTTtJQUM3QjtBQUNGO0FBRUE7O0NBRUMsR0FDRHJCLFlBQVlzQixTQUFTLENBQUNDLGdCQUFnQixHQUFHLFNBQVNBO0lBQ2hELElBQUksSUFBSSxDQUFDRixNQUFNLEVBQUU7UUFDZixNQUFNLElBQUksQ0FBQ0EsTUFBTTtJQUNuQjtBQUNGO0FBRUE7O0NBRUMsR0FFRHJCLFlBQVlzQixTQUFTLENBQUNMLFNBQVMsR0FBRyxTQUFTQSxVQUFVTyxRQUFRO0lBQzNELElBQUksSUFBSSxDQUFDSCxNQUFNLEVBQUU7UUFDZkcsU0FBUyxJQUFJLENBQUNILE1BQU07UUFDcEI7SUFDRjtJQUVBLElBQUksSUFBSSxDQUFDVixVQUFVLEVBQUU7UUFDbkIsSUFBSSxDQUFDQSxVQUFVLENBQUNjLElBQUksQ0FBQ0Q7SUFDdkIsT0FBTztRQUNMLElBQUksQ0FBQ2IsVUFBVSxHQUFHO1lBQUNhO1NBQVM7SUFDOUI7QUFDRjtBQUVBOztDQUVDLEdBRUR4QixZQUFZc0IsU0FBUyxDQUFDSCxXQUFXLEdBQUcsU0FBU0EsWUFBWUssUUFBUTtJQUMvRCxJQUFJLENBQUMsSUFBSSxDQUFDYixVQUFVLEVBQUU7UUFDcEI7SUFDRjtJQUNBLElBQUllLFFBQVEsSUFBSSxDQUFDZixVQUFVLENBQUNnQixPQUFPLENBQUNIO0lBQ3BDLElBQUlFLFVBQVUsQ0FBQyxHQUFHO1FBQ2hCLElBQUksQ0FBQ2YsVUFBVSxDQUFDaUIsTUFBTSxDQUFDRixPQUFPO0lBQ2hDO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDRDFCLFlBQVk2QixNQUFNLEdBQUcsU0FBU0E7SUFDNUIsSUFBSW5CO0lBQ0osSUFBSUYsUUFBUSxJQUFJUixZQUFZLFNBQVNDLFNBQVM2QixDQUFDO1FBQzdDcEIsU0FBU29CO0lBQ1g7SUFDQSxPQUFPO1FBQ0x0QixPQUFPQTtRQUNQRSxRQUFRQTtJQUNWO0FBQ0Y7QUFFQXFCLE9BQU9DLE9BQU8sR0FBR2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanM/ZWU0OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG5cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4oZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbCA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgIH1cbiAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4gPSBmdW5jdGlvbihvbmZ1bGZpbGxlZCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiJdLCJuYW1lcyI6WyJDYW5jZWwiLCJyZXF1aXJlIiwiQ2FuY2VsVG9rZW4iLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwicHJvbWlzZSIsIlByb21pc2UiLCJwcm9taXNlRXhlY3V0b3IiLCJyZXNvbHZlIiwidG9rZW4iLCJ0aGVuIiwiY2FuY2VsIiwiX2xpc3RlbmVycyIsImkiLCJsIiwibGVuZ3RoIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsInN1YnNjcmliZSIsInJlamVjdCIsInVuc3Vic2NyaWJlIiwibWVzc2FnZSIsInJlYXNvbiIsInByb3RvdHlwZSIsInRocm93SWZSZXF1ZXN0ZWQiLCJsaXN0ZW5lciIsInB1c2giLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJzb3VyY2UiLCJjIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/CancelToken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/isCancel.js":
/*!***********************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/cancel/isCancel.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function isCancel(value) {\n    return !!(value && value.__CANCEL__);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxTQUFTQyxLQUFLO0lBQ3RDLE9BQU8sQ0FBQyxDQUFFQSxDQUFBQSxTQUFTQSxNQUFNQyxVQUFVO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanM/NjY4YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaXNDYW5jZWwiLCJ2YWx1ZSIsIl9fQ0FOQ0VMX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/isCancel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/core/Axios.js":
/*!******************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/core/Axios.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/mergeConfig.js\");\nvar validator = __webpack_require__(/*! ../helpers/validator */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/validator.js\");\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */ function Axios(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n        request: new InterceptorManager(),\n        response: new InterceptorManager()\n    };\n}\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */ Axios.prototype.request = function request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === \"string\") {\n        config = config || {};\n        config.url = configOrUrl;\n    } else {\n        config = configOrUrl || {};\n    }\n    config = mergeConfig(this.defaults, config);\n    // Set config.method\n    if (config.method) {\n        config.method = config.method.toLowerCase();\n    } else if (this.defaults.method) {\n        config.method = this.defaults.method.toLowerCase();\n    } else {\n        config.method = \"get\";\n    }\n    var transitional = config.transitional;\n    if (transitional !== undefined) {\n        validator.assertOptions(transitional, {\n            silentJSONParsing: validators.transitional(validators.boolean),\n            forcedJSONParsing: validators.transitional(validators.boolean),\n            clarifyTimeoutError: validators.transitional(validators.boolean)\n        }, false);\n    }\n    // filter out skipped interceptors\n    var requestInterceptorChain = [];\n    var synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n        if (typeof interceptor.runWhen === \"function\" && interceptor.runWhen(config) === false) {\n            return;\n        }\n        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n    var responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n    var promise;\n    if (!synchronousRequestInterceptors) {\n        var chain = [\n            dispatchRequest,\n            undefined\n        ];\n        Array.prototype.unshift.apply(chain, requestInterceptorChain);\n        chain = chain.concat(responseInterceptorChain);\n        promise = Promise.resolve(config);\n        while(chain.length){\n            promise = promise.then(chain.shift(), chain.shift());\n        }\n        return promise;\n    }\n    var newConfig = config;\n    while(requestInterceptorChain.length){\n        var onFulfilled = requestInterceptorChain.shift();\n        var onRejected = requestInterceptorChain.shift();\n        try {\n            newConfig = onFulfilled(newConfig);\n        } catch (error) {\n            onRejected(error);\n            break;\n        }\n    }\n    try {\n        promise = dispatchRequest(newConfig);\n    } catch (error) {\n        return Promise.reject(error);\n    }\n    while(responseInterceptorChain.length){\n        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n    }\n    return promise;\n};\nAxios.prototype.getUri = function getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, \"\");\n};\n// Provide aliases for supported request methods\nutils.forEach([\n    \"delete\",\n    \"get\",\n    \"head\",\n    \"options\"\n], function forEachMethodNoData(method) {\n    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {\n        return this.request(mergeConfig(config || {}, {\n            method: method,\n            url: url,\n            data: (config || {}).data\n        }));\n    };\n});\nutils.forEach([\n    \"post\",\n    \"put\",\n    \"patch\"\n], function forEachMethodWithData(method) {\n    /*eslint func-names:0*/ Axios.prototype[method] = function(url, data, config) {\n        return this.request(mergeConfig(config || {}, {\n            method: method,\n            url: url,\n            data: data\n        }));\n    };\n});\nmodule.exports = Axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/core/Axios.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/core/InterceptorManager.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/core/InterceptorManager.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nfunction InterceptorManager() {\n    this.handlers = [];\n}\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */ InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n    this.handlers.push({\n        fulfilled: fulfilled,\n        rejected: rejected,\n        synchronous: options ? options.synchronous : false,\n        runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n};\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */ InterceptorManager.prototype.eject = function eject(id) {\n    if (this.handlers[id]) {\n        this.handlers[id] = null;\n    }\n};\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */ InterceptorManager.prototype.forEach = function forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n        if (h !== null) {\n            fn(h);\n        }\n    });\n};\nmodule.exports = InterceptorManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQixTQUFTQztJQUNQLElBQUksQ0FBQ0MsUUFBUSxHQUFHLEVBQUU7QUFDcEI7QUFFQTs7Ozs7OztDQU9DLEdBQ0RELG1CQUFtQkUsU0FBUyxDQUFDQyxHQUFHLEdBQUcsU0FBU0EsSUFBSUMsU0FBUyxFQUFFQyxRQUFRLEVBQUVDLE9BQU87SUFDMUUsSUFBSSxDQUFDTCxRQUFRLENBQUNNLElBQUksQ0FBQztRQUNqQkgsV0FBV0E7UUFDWEMsVUFBVUE7UUFDVkcsYUFBYUYsVUFBVUEsUUFBUUUsV0FBVyxHQUFHO1FBQzdDQyxTQUFTSCxVQUFVQSxRQUFRRyxPQUFPLEdBQUc7SUFDdkM7SUFDQSxPQUFPLElBQUksQ0FBQ1IsUUFBUSxDQUFDUyxNQUFNLEdBQUc7QUFDaEM7QUFFQTs7OztDQUlDLEdBQ0RWLG1CQUFtQkUsU0FBUyxDQUFDUyxLQUFLLEdBQUcsU0FBU0EsTUFBTUMsRUFBRTtJQUNwRCxJQUFJLElBQUksQ0FBQ1gsUUFBUSxDQUFDVyxHQUFHLEVBQUU7UUFDckIsSUFBSSxDQUFDWCxRQUFRLENBQUNXLEdBQUcsR0FBRztJQUN0QjtBQUNGO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNEWixtQkFBbUJFLFNBQVMsQ0FBQ1csT0FBTyxHQUFHLFNBQVNBLFFBQVFDLEVBQUU7SUFDeERoQixNQUFNZSxPQUFPLENBQUMsSUFBSSxDQUFDWixRQUFRLEVBQUUsU0FBU2MsZUFBZUMsQ0FBQztRQUNwRCxJQUFJQSxNQUFNLE1BQU07WUFDZEYsR0FBR0U7UUFDTDtJQUNGO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGF0QXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzP2QyZjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJoYW5kbGVycyIsInByb3RvdHlwZSIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwib3B0aW9ucyIsInB1c2giLCJzeW5jaHJvbm91cyIsInJ1bldoZW4iLCJsZW5ndGgiLCJlamVjdCIsImlkIiwiZm9yRWFjaCIsImZuIiwiZm9yRWFjaEhhbmRsZXIiLCJoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/core/InterceptorManager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/core/buildFullPath.js":
/*!**************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/core/buildFullPath.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/isAbsoluteURL.js\");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/combineURLs.js\");\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */ module.exports = function buildFullPath(baseURL, requestedURL) {\n    if (baseURL && !isAbsoluteURL(requestedURL)) {\n        return combineURLs(baseURL, requestedURL);\n    }\n    return requestedURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsZ0JBQWdCQyxtQkFBT0EsQ0FBQztBQUM1QixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUUxQjs7Ozs7Ozs7Q0FRQyxHQUNERSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsY0FBY0MsT0FBTyxFQUFFQyxZQUFZO0lBQzNELElBQUlELFdBQVcsQ0FBQ04sY0FBY08sZUFBZTtRQUMzQyxPQUFPTCxZQUFZSSxTQUFTQztJQUM5QjtJQUNBLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGF0QXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcz9lNDNkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iXSwibmFtZXMiOlsiaXNBYnNvbHV0ZVVSTCIsInJlcXVpcmUiLCJjb21iaW5lVVJMcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJidWlsZEZ1bGxQYXRoIiwiYmFzZVVSTCIsInJlcXVlc3RlZFVSTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/core/buildFullPath.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/core/createError.js":
/*!************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/core/createError.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/enhanceError.js\");\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */ module.exports = function createError(message, config, code, request, response) {\n    var error = new Error(message);\n    return enhanceError(error, config, code, request, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDO0FBRTNCOzs7Ozs7Ozs7Q0FTQyxHQUNEQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsWUFBWUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBQzVFLElBQUlDLFFBQVEsSUFBSUMsTUFBTU47SUFDdEIsT0FBT0wsYUFBYVUsT0FBT0osUUFBUUMsTUFBTUMsU0FBU0M7QUFDcEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGF0QXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanM/MmM5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIl0sIm5hbWVzIjpbImVuaGFuY2VFcnJvciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlIiwiY29uZmlnIiwiY29kZSIsInJlcXVlc3QiLCJyZXNwb25zZSIsImVycm9yIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/core/createError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/core/dispatchRequest.js":
/*!****************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/core/dispatchRequest.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/defaults/index.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/cancel/Cancel.js\");\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */ function throwIfCancellationRequested(config) {\n    if (config.cancelToken) {\n        config.cancelToken.throwIfRequested();\n    }\n    if (config.signal && config.signal.aborted) {\n        throw new Cancel(\"canceled\");\n    }\n}\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */ module.exports = function dispatchRequest(config) {\n    throwIfCancellationRequested(config);\n    // Ensure headers exist\n    config.headers = config.headers || {};\n    // Transform request data\n    config.data = transformData.call(config, config.data, config.headers, config.transformRequest);\n    // Flatten headers\n    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);\n    utils.forEach([\n        \"delete\",\n        \"get\",\n        \"head\",\n        \"post\",\n        \"put\",\n        \"patch\",\n        \"common\"\n    ], function cleanHeaderConfig(method) {\n        delete config.headers[method];\n    });\n    var adapter = config.adapter || defaults.adapter;\n    return adapter(config).then(function onAdapterResolution(response) {\n        throwIfCancellationRequested(config);\n        // Transform response data\n        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);\n        return response;\n    }, function onAdapterRejection(reason) {\n        if (!isCancel(reason)) {\n            throwIfCancellationRequested(config);\n            // Transform response data\n            if (reason && reason.response) {\n                reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);\n            }\n        }\n        return Promise.reject(reason);\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxnQkFBZ0JELG1CQUFPQSxDQUFDO0FBQzVCLElBQUlFLFdBQVdGLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlHLFdBQVdILG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlJLFNBQVNKLG1CQUFPQSxDQUFDO0FBRXJCOztDQUVDLEdBQ0QsU0FBU0ssNkJBQTZCQyxNQUFNO0lBQzFDLElBQUlBLE9BQU9DLFdBQVcsRUFBRTtRQUN0QkQsT0FBT0MsV0FBVyxDQUFDQyxnQkFBZ0I7SUFDckM7SUFFQSxJQUFJRixPQUFPRyxNQUFNLElBQUlILE9BQU9HLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFO1FBQzFDLE1BQU0sSUFBSU4sT0FBTztJQUNuQjtBQUNGO0FBRUE7Ozs7O0NBS0MsR0FDRE8sT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGdCQUFnQlAsTUFBTTtJQUM5Q0QsNkJBQTZCQztJQUU3Qix1QkFBdUI7SUFDdkJBLE9BQU9RLE9BQU8sR0FBR1IsT0FBT1EsT0FBTyxJQUFJLENBQUM7SUFFcEMseUJBQXlCO0lBQ3pCUixPQUFPUyxJQUFJLEdBQUdkLGNBQWNlLElBQUksQ0FDOUJWLFFBQ0FBLE9BQU9TLElBQUksRUFDWFQsT0FBT1EsT0FBTyxFQUNkUixPQUFPVyxnQkFBZ0I7SUFHekIsa0JBQWtCO0lBQ2xCWCxPQUFPUSxPQUFPLEdBQUdmLE1BQU1tQixLQUFLLENBQzFCWixPQUFPUSxPQUFPLENBQUNLLE1BQU0sSUFBSSxDQUFDLEdBQzFCYixPQUFPUSxPQUFPLENBQUNSLE9BQU9jLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FDbENkLE9BQU9RLE9BQU87SUFHaEJmLE1BQU1zQixPQUFPLENBQ1g7UUFBQztRQUFVO1FBQU87UUFBUTtRQUFRO1FBQU87UUFBUztLQUFTLEVBQzNELFNBQVNDLGtCQUFrQkYsTUFBTTtRQUMvQixPQUFPZCxPQUFPUSxPQUFPLENBQUNNLE9BQU87SUFDL0I7SUFHRixJQUFJRyxVQUFVakIsT0FBT2lCLE9BQU8sSUFBSXBCLFNBQVNvQixPQUFPO0lBRWhELE9BQU9BLFFBQVFqQixRQUFRa0IsSUFBSSxDQUFDLFNBQVNDLG9CQUFvQkMsUUFBUTtRQUMvRHJCLDZCQUE2QkM7UUFFN0IsMEJBQTBCO1FBQzFCb0IsU0FBU1gsSUFBSSxHQUFHZCxjQUFjZSxJQUFJLENBQ2hDVixRQUNBb0IsU0FBU1gsSUFBSSxFQUNiVyxTQUFTWixPQUFPLEVBQ2hCUixPQUFPcUIsaUJBQWlCO1FBRzFCLE9BQU9EO0lBQ1QsR0FBRyxTQUFTRSxtQkFBbUJDLE1BQU07UUFDbkMsSUFBSSxDQUFDM0IsU0FBUzJCLFNBQVM7WUFDckJ4Qiw2QkFBNkJDO1lBRTdCLDBCQUEwQjtZQUMxQixJQUFJdUIsVUFBVUEsT0FBT0gsUUFBUSxFQUFFO2dCQUM3QkcsT0FBT0gsUUFBUSxDQUFDWCxJQUFJLEdBQUdkLGNBQWNlLElBQUksQ0FDdkNWLFFBQ0F1QixPQUFPSCxRQUFRLENBQUNYLElBQUksRUFDcEJjLE9BQU9ILFFBQVEsQ0FBQ1osT0FBTyxFQUN2QlIsT0FBT3FCLGlCQUFpQjtZQUU1QjtRQUNGO1FBRUEsT0FBT0csUUFBUUMsTUFBTSxDQUFDRjtJQUN4QjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcz9kODhkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsKCdjYW5jZWxlZCcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwidHJhbnNmb3JtRGF0YSIsImlzQ2FuY2VsIiwiZGVmYXVsdHMiLCJDYW5jZWwiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiY29uZmlnIiwiY2FuY2VsVG9rZW4iLCJ0aHJvd0lmUmVxdWVzdGVkIiwic2lnbmFsIiwiYWJvcnRlZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkaXNwYXRjaFJlcXVlc3QiLCJoZWFkZXJzIiwiZGF0YSIsImNhbGwiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJtZXRob2QiLCJmb3JFYWNoIiwiY2xlYW5IZWFkZXJDb25maWciLCJhZGFwdGVyIiwidGhlbiIsIm9uQWRhcHRlclJlc29sdXRpb24iLCJyZXNwb25zZSIsInRyYW5zZm9ybVJlc3BvbnNlIiwib25BZGFwdGVyUmVqZWN0aW9uIiwicmVhc29uIiwiUHJvbWlzZSIsInJlamVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/core/dispatchRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/core/enhanceError.js":
/*!*************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/core/enhanceError.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */ module.exports = function enhanceError(error, config, code, request, response) {\n    error.config = config;\n    if (code) {\n        error.code = code;\n    }\n    error.request = request;\n    error.response = response;\n    error.isAxiosError = true;\n    error.toJSON = function toJSON() {\n        return {\n            // Standard\n            message: this.message,\n            name: this.name,\n            // Microsoft\n            description: this.description,\n            number: this.number,\n            // Mozilla\n            fileName: this.fileName,\n            lineNumber: this.lineNumber,\n            columnNumber: this.columnNumber,\n            stack: this.stack,\n            // Axios\n            config: this.config,\n            code: this.code,\n            status: this.response && this.response.status ? this.response.status : null\n        };\n    };\n    return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDREEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGFBQWFDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsUUFBUTtJQUMzRUosTUFBTUMsTUFBTSxHQUFHQTtJQUNmLElBQUlDLE1BQU07UUFDUkYsTUFBTUUsSUFBSSxHQUFHQTtJQUNmO0lBRUFGLE1BQU1HLE9BQU8sR0FBR0E7SUFDaEJILE1BQU1JLFFBQVEsR0FBR0E7SUFDakJKLE1BQU1LLFlBQVksR0FBRztJQUVyQkwsTUFBTU0sTUFBTSxHQUFHLFNBQVNBO1FBQ3RCLE9BQU87WUFDTCxXQUFXO1lBQ1hDLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1lBQ3JCQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmLFlBQVk7WUFDWkMsYUFBYSxJQUFJLENBQUNBLFdBQVc7WUFDN0JDLFFBQVEsSUFBSSxDQUFDQSxNQUFNO1lBQ25CLFVBQVU7WUFDVkMsVUFBVSxJQUFJLENBQUNBLFFBQVE7WUFDdkJDLFlBQVksSUFBSSxDQUFDQSxVQUFVO1lBQzNCQyxjQUFjLElBQUksQ0FBQ0EsWUFBWTtZQUMvQkMsT0FBTyxJQUFJLENBQUNBLEtBQUs7WUFDakIsUUFBUTtZQUNSYixRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUNuQkMsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZmEsUUFBUSxJQUFJLENBQUNYLFFBQVEsSUFBSSxJQUFJLENBQUNBLFFBQVEsQ0FBQ1csTUFBTSxHQUFHLElBQUksQ0FBQ1gsUUFBUSxDQUFDVyxNQUFNLEdBQUc7UUFDekU7SUFDRjtJQUNBLE9BQU9mO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGF0QXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzPzc1ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVuaGFuY2VFcnJvciIsImVycm9yIiwiY29uZmlnIiwiY29kZSIsInJlcXVlc3QiLCJyZXNwb25zZSIsImlzQXhpb3NFcnJvciIsInRvSlNPTiIsIm1lc3NhZ2UiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/core/enhanceError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/core/mergeConfig.js":
/*!************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/core/mergeConfig.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */ module.exports = function mergeConfig(config1, config2) {\n    // eslint-disable-next-line no-param-reassign\n    config2 = config2 || {};\n    var config = {};\n    function getMergedValue(target, source) {\n        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n            return utils.merge(target, source);\n        } else if (utils.isPlainObject(source)) {\n            return utils.merge({}, source);\n        } else if (utils.isArray(source)) {\n            return source.slice();\n        }\n        return source;\n    }\n    // eslint-disable-next-line consistent-return\n    function mergeDeepProperties(prop) {\n        if (!utils.isUndefined(config2[prop])) {\n            return getMergedValue(config1[prop], config2[prop]);\n        } else if (!utils.isUndefined(config1[prop])) {\n            return getMergedValue(undefined, config1[prop]);\n        }\n    }\n    // eslint-disable-next-line consistent-return\n    function valueFromConfig2(prop) {\n        if (!utils.isUndefined(config2[prop])) {\n            return getMergedValue(undefined, config2[prop]);\n        }\n    }\n    // eslint-disable-next-line consistent-return\n    function defaultToConfig2(prop) {\n        if (!utils.isUndefined(config2[prop])) {\n            return getMergedValue(undefined, config2[prop]);\n        } else if (!utils.isUndefined(config1[prop])) {\n            return getMergedValue(undefined, config1[prop]);\n        }\n    }\n    // eslint-disable-next-line consistent-return\n    function mergeDirectKeys(prop) {\n        if (prop in config2) {\n            return getMergedValue(config1[prop], config2[prop]);\n        } else if (prop in config1) {\n            return getMergedValue(undefined, config1[prop]);\n        }\n    }\n    var mergeMap = {\n        \"url\": valueFromConfig2,\n        \"method\": valueFromConfig2,\n        \"data\": valueFromConfig2,\n        \"baseURL\": defaultToConfig2,\n        \"transformRequest\": defaultToConfig2,\n        \"transformResponse\": defaultToConfig2,\n        \"paramsSerializer\": defaultToConfig2,\n        \"timeout\": defaultToConfig2,\n        \"timeoutMessage\": defaultToConfig2,\n        \"withCredentials\": defaultToConfig2,\n        \"adapter\": defaultToConfig2,\n        \"responseType\": defaultToConfig2,\n        \"xsrfCookieName\": defaultToConfig2,\n        \"xsrfHeaderName\": defaultToConfig2,\n        \"onUploadProgress\": defaultToConfig2,\n        \"onDownloadProgress\": defaultToConfig2,\n        \"decompress\": defaultToConfig2,\n        \"maxContentLength\": defaultToConfig2,\n        \"maxBodyLength\": defaultToConfig2,\n        \"transport\": defaultToConfig2,\n        \"httpAgent\": defaultToConfig2,\n        \"httpsAgent\": defaultToConfig2,\n        \"cancelToken\": defaultToConfig2,\n        \"socketPath\": defaultToConfig2,\n        \"responseEncoding\": defaultToConfig2,\n        \"validateStatus\": mergeDirectKeys\n    };\n    utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n        var merge = mergeMap[prop] || mergeDeepProperties;\n        var configValue = merge(prop);\n        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);\n    });\n    return config;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCOzs7Ozs7O0NBT0MsR0FDREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFlBQVlDLE9BQU8sRUFBRUMsT0FBTztJQUNwRCw2Q0FBNkM7SUFDN0NBLFVBQVVBLFdBQVcsQ0FBQztJQUN0QixJQUFJQyxTQUFTLENBQUM7SUFFZCxTQUFTQyxlQUFlQyxNQUFNLEVBQUVDLE1BQU07UUFDcEMsSUFBSVYsTUFBTVcsYUFBYSxDQUFDRixXQUFXVCxNQUFNVyxhQUFhLENBQUNELFNBQVM7WUFDOUQsT0FBT1YsTUFBTVksS0FBSyxDQUFDSCxRQUFRQztRQUM3QixPQUFPLElBQUlWLE1BQU1XLGFBQWEsQ0FBQ0QsU0FBUztZQUN0QyxPQUFPVixNQUFNWSxLQUFLLENBQUMsQ0FBQyxHQUFHRjtRQUN6QixPQUFPLElBQUlWLE1BQU1hLE9BQU8sQ0FBQ0gsU0FBUztZQUNoQyxPQUFPQSxPQUFPSSxLQUFLO1FBQ3JCO1FBQ0EsT0FBT0o7SUFDVDtJQUVBLDZDQUE2QztJQUM3QyxTQUFTSyxvQkFBb0JDLElBQUk7UUFDL0IsSUFBSSxDQUFDaEIsTUFBTWlCLFdBQVcsQ0FBQ1gsT0FBTyxDQUFDVSxLQUFLLEdBQUc7WUFDckMsT0FBT1IsZUFBZUgsT0FBTyxDQUFDVyxLQUFLLEVBQUVWLE9BQU8sQ0FBQ1UsS0FBSztRQUNwRCxPQUFPLElBQUksQ0FBQ2hCLE1BQU1pQixXQUFXLENBQUNaLE9BQU8sQ0FBQ1csS0FBSyxHQUFHO1lBQzVDLE9BQU9SLGVBQWVVLFdBQVdiLE9BQU8sQ0FBQ1csS0FBSztRQUNoRDtJQUNGO0lBRUEsNkNBQTZDO0lBQzdDLFNBQVNHLGlCQUFpQkgsSUFBSTtRQUM1QixJQUFJLENBQUNoQixNQUFNaUIsV0FBVyxDQUFDWCxPQUFPLENBQUNVLEtBQUssR0FBRztZQUNyQyxPQUFPUixlQUFlVSxXQUFXWixPQUFPLENBQUNVLEtBQUs7UUFDaEQ7SUFDRjtJQUVBLDZDQUE2QztJQUM3QyxTQUFTSSxpQkFBaUJKLElBQUk7UUFDNUIsSUFBSSxDQUFDaEIsTUFBTWlCLFdBQVcsQ0FBQ1gsT0FBTyxDQUFDVSxLQUFLLEdBQUc7WUFDckMsT0FBT1IsZUFBZVUsV0FBV1osT0FBTyxDQUFDVSxLQUFLO1FBQ2hELE9BQU8sSUFBSSxDQUFDaEIsTUFBTWlCLFdBQVcsQ0FBQ1osT0FBTyxDQUFDVyxLQUFLLEdBQUc7WUFDNUMsT0FBT1IsZUFBZVUsV0FBV2IsT0FBTyxDQUFDVyxLQUFLO1FBQ2hEO0lBQ0Y7SUFFQSw2Q0FBNkM7SUFDN0MsU0FBU0ssZ0JBQWdCTCxJQUFJO1FBQzNCLElBQUlBLFFBQVFWLFNBQVM7WUFDbkIsT0FBT0UsZUFBZUgsT0FBTyxDQUFDVyxLQUFLLEVBQUVWLE9BQU8sQ0FBQ1UsS0FBSztRQUNwRCxPQUFPLElBQUlBLFFBQVFYLFNBQVM7WUFDMUIsT0FBT0csZUFBZVUsV0FBV2IsT0FBTyxDQUFDVyxLQUFLO1FBQ2hEO0lBQ0Y7SUFFQSxJQUFJTSxXQUFXO1FBQ2IsT0FBT0g7UUFDUCxVQUFVQTtRQUNWLFFBQVFBO1FBQ1IsV0FBV0M7UUFDWCxvQkFBb0JBO1FBQ3BCLHFCQUFxQkE7UUFDckIsb0JBQW9CQTtRQUNwQixXQUFXQTtRQUNYLGtCQUFrQkE7UUFDbEIsbUJBQW1CQTtRQUNuQixXQUFXQTtRQUNYLGdCQUFnQkE7UUFDaEIsa0JBQWtCQTtRQUNsQixrQkFBa0JBO1FBQ2xCLG9CQUFvQkE7UUFDcEIsc0JBQXNCQTtRQUN0QixjQUFjQTtRQUNkLG9CQUFvQkE7UUFDcEIsaUJBQWlCQTtRQUNqQixhQUFhQTtRQUNiLGFBQWFBO1FBQ2IsY0FBY0E7UUFDZCxlQUFlQTtRQUNmLGNBQWNBO1FBQ2Qsb0JBQW9CQTtRQUNwQixrQkFBa0JDO0lBQ3BCO0lBRUFyQixNQUFNdUIsT0FBTyxDQUFDQyxPQUFPQyxJQUFJLENBQUNwQixTQUFTcUIsTUFBTSxDQUFDRixPQUFPQyxJQUFJLENBQUNuQixXQUFXLFNBQVNxQixtQkFBbUJYLElBQUk7UUFDL0YsSUFBSUosUUFBUVUsUUFBUSxDQUFDTixLQUFLLElBQUlEO1FBQzlCLElBQUlhLGNBQWNoQixNQUFNSTtRQUN2QmhCLE1BQU1pQixXQUFXLENBQUNXLGdCQUFnQmhCLFVBQVVTLG1CQUFxQmQsQ0FBQUEsTUFBTSxDQUFDUyxLQUFLLEdBQUdZLFdBQVU7SUFDN0Y7SUFFQSxPQUFPckI7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL0NoYXRBcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcz9iOTM1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lcmdlTWFwID0ge1xuICAgICd1cmwnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdtZXRob2QnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdkYXRhJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnYmFzZVVSTCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlcXVlc3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXNwb25zZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3BhcmFtc1NlcmlhbGl6ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dE1lc3NhZ2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd3aXRoQ3JlZGVudGlhbHMnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdhZGFwdGVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VUeXBlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkNvb2tpZU5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmSGVhZGVyTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uVXBsb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvbkRvd25sb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdkZWNvbXByZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Q29udGVudExlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heEJvZHlMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIHZhciBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgdmFyIGNvbmZpZ1ZhbHVlID0gbWVyZ2UocHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibWVyZ2VDb25maWciLCJjb25maWcxIiwiY29uZmlnMiIsImNvbmZpZyIsImdldE1lcmdlZFZhbHVlIiwidGFyZ2V0Iiwic291cmNlIiwiaXNQbGFpbk9iamVjdCIsIm1lcmdlIiwiaXNBcnJheSIsInNsaWNlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInByb3AiLCJpc1VuZGVmaW5lZCIsInVuZGVmaW5lZCIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJmb3JFYWNoIiwiT2JqZWN0Iiwia2V5cyIsImNvbmNhdCIsImNvbXB1dGVDb25maWdWYWx1ZSIsImNvbmZpZ1ZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/core/mergeConfig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/core/settle.js":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/core/settle.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar createError = __webpack_require__(/*! ./createError */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/createError.js\");\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */ module.exports = function settle(resolve, reject, response) {\n    var validateStatus = response.config.validateStatus;\n    if (!response.status || !validateStatus || validateStatus(response.status)) {\n        resolve(response);\n    } else {\n        reject(createError(\"Request failed with status code \" + response.status, response.config, null, response.request, response));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUUxQjs7Ozs7O0NBTUMsR0FDREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLE9BQU9DLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxRQUFRO0lBQ3hELElBQUlDLGlCQUFpQkQsU0FBU0UsTUFBTSxDQUFDRCxjQUFjO0lBQ25ELElBQUksQ0FBQ0QsU0FBU0csTUFBTSxJQUFJLENBQUNGLGtCQUFrQkEsZUFBZUQsU0FBU0csTUFBTSxHQUFHO1FBQzFFTCxRQUFRRTtJQUNWLE9BQU87UUFDTEQsT0FBT04sWUFDTCxxQ0FBcUNPLFNBQVNHLE1BQU0sRUFDcERILFNBQVNFLE1BQU0sRUFDZixNQUNBRixTQUFTSSxPQUFPLEVBQ2hCSjtJQUVKO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGF0QXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzP2U5NjYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiY3JlYXRlRXJyb3IiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInNldHRsZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXNwb25zZSIsInZhbGlkYXRlU3RhdHVzIiwiY29uZmlnIiwic3RhdHVzIiwicmVxdWVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/core/settle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/core/transformData.js":
/*!**************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/core/transformData.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/defaults/index.js\");\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */ module.exports = function transformData(data, headers, fns) {\n    var context = this || defaults;\n    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {\n        data = fn.call(context, data, headers);\n    });\n    return data;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUM7QUFFdkI7Ozs7Ozs7Q0FPQyxHQUNERSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsY0FBY0MsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLEdBQUc7SUFDeEQsSUFBSUMsVUFBVSxJQUFJLElBQUlQO0lBQ3RCLDRCQUE0QixHQUM1QkYsTUFBTVUsT0FBTyxDQUFDRixLQUFLLFNBQVNHLFVBQVVDLEVBQUU7UUFDdENOLE9BQU9NLEdBQUdDLElBQUksQ0FBQ0osU0FBU0gsTUFBTUM7SUFDaEM7SUFFQSxPQUFPRDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanM/M2I3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJkZWZhdWx0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0cmFuc2Zvcm1EYXRhIiwiZGF0YSIsImhlYWRlcnMiLCJmbnMiLCJjb250ZXh0IiwiZm9yRWFjaCIsInRyYW5zZm9ybSIsImZuIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/core/transformData.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/defaults/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/defaults/index.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ../helpers/normalizeHeaderName */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/normalizeHeaderName.js\");\nvar enhanceError = __webpack_require__(/*! ../core/enhanceError */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/core/enhanceError.js\");\nvar transitionalDefaults = __webpack_require__(/*! ./transitional */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/defaults/transitional.js\");\nvar DEFAULT_CONTENT_TYPE = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n};\nfunction setContentTypeIfUnset(headers, value) {\n    if (!utils.isUndefined(headers) && utils.isUndefined(headers[\"Content-Type\"])) {\n        headers[\"Content-Type\"] = value;\n    }\n}\nfunction getDefaultAdapter() {\n    var adapter;\n    if (typeof XMLHttpRequest !== \"undefined\") {\n        // For browsers use XHR adapter\n        adapter = __webpack_require__(/*! ../adapters/xhr */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/adapters/xhr.js\");\n    } else if (typeof process !== \"undefined\" && Object.prototype.toString.call(process) === \"[object process]\") {\n        // For node use HTTP adapter\n        adapter = __webpack_require__(/*! ../adapters/http */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/adapters/http.js\");\n    }\n    return adapter;\n}\nfunction stringifySafely(rawValue, parser, encoder) {\n    if (utils.isString(rawValue)) {\n        try {\n            (parser || JSON.parse)(rawValue);\n            return utils.trim(rawValue);\n        } catch (e) {\n            if (e.name !== \"SyntaxError\") {\n                throw e;\n            }\n        }\n    }\n    return (encoder || JSON.stringify)(rawValue);\n}\nvar defaults = {\n    transitional: transitionalDefaults,\n    adapter: getDefaultAdapter(),\n    transformRequest: [\n        function transformRequest(data, headers) {\n            normalizeHeaderName(headers, \"Accept\");\n            normalizeHeaderName(headers, \"Content-Type\");\n            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n                return data;\n            }\n            if (utils.isArrayBufferView(data)) {\n                return data.buffer;\n            }\n            if (utils.isURLSearchParams(data)) {\n                setContentTypeIfUnset(headers, \"application/x-www-form-urlencoded;charset=utf-8\");\n                return data.toString();\n            }\n            if (utils.isObject(data) || headers && headers[\"Content-Type\"] === \"application/json\") {\n                setContentTypeIfUnset(headers, \"application/json\");\n                return stringifySafely(data);\n            }\n            return data;\n        }\n    ],\n    transformResponse: [\n        function transformResponse(data) {\n            var transitional = this.transitional || defaults.transitional;\n            var silentJSONParsing = transitional && transitional.silentJSONParsing;\n            var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n            var strictJSONParsing = !silentJSONParsing && this.responseType === \"json\";\n            if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n                try {\n                    return JSON.parse(data);\n                } catch (e) {\n                    if (strictJSONParsing) {\n                        if (e.name === \"SyntaxError\") {\n                            throw enhanceError(e, this, \"E_JSON_PARSE\");\n                        }\n                        throw e;\n                    }\n                }\n            }\n            return data;\n        }\n    ],\n    /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */ timeout: 0,\n    xsrfCookieName: \"XSRF-TOKEN\",\n    xsrfHeaderName: \"X-XSRF-TOKEN\",\n    maxContentLength: -1,\n    maxBodyLength: -1,\n    validateStatus: function validateStatus(status) {\n        return status >= 200 && status < 300;\n    },\n    headers: {\n        common: {\n            \"Accept\": \"application/json, text/plain, */*\"\n        }\n    }\n};\nutils.forEach([\n    \"delete\",\n    \"get\",\n    \"head\"\n], function forEachMethodNoData(method) {\n    defaults.headers[method] = {};\n});\nutils.forEach([\n    \"post\",\n    \"put\",\n    \"patch\"\n], function forEachMethodWithData(method) {\n    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\nmodule.exports = defaults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/defaults/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/defaults/transitional.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/defaults/transitional.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxtQkFBbUI7SUFDbkJDLG1CQUFtQjtJQUNuQkMscUJBQXFCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanM/ZDZlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwiY2xhcmlmeVRpbWVvdXRFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/defaults/transitional.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/env/data.js":
/*!****************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/env/data.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    \"version\": \"0.26.1\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZixXQUFXO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGF0QXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzP2JhMzEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwidmVyc2lvblwiOiBcIjAuMjYuMVwiXG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/env/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/bind.js":
/*!********************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/bind.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function bind(fn, thisArg) {\n    return function wrap() {\n        var args = new Array(arguments.length);\n        for(var i = 0; i < args.length; i++){\n            args[i] = arguments[i];\n        }\n        return fn.apply(thisArg, args);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxLQUFLQyxFQUFFLEVBQUVDLE9BQU87SUFDeEMsT0FBTyxTQUFTQztRQUNkLElBQUlDLE9BQU8sSUFBSUMsTUFBTUMsVUFBVUMsTUFBTTtRQUNyQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUosS0FBS0csTUFBTSxFQUFFQyxJQUFLO1lBQ3BDSixJQUFJLENBQUNJLEVBQUUsR0FBR0YsU0FBUyxDQUFDRSxFQUFFO1FBQ3hCO1FBQ0EsT0FBT1AsR0FBR1EsS0FBSyxDQUFDUCxTQUFTRTtJQUMzQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanM/Njg0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiLCJmbiIsInRoaXNBcmciLCJ3cmFwIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiaSIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/bind.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/buildURL.js":
/*!************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/buildURL.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nfunction encode(val) {\n    return encodeURIComponent(val).replace(/%3A/gi, \":\").replace(/%24/g, \"$\").replace(/%2C/gi, \",\").replace(/%20/g, \"+\").replace(/%5B/gi, \"[\").replace(/%5D/gi, \"]\");\n}\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */ module.exports = function buildURL(url, params, paramsSerializer) {\n    /*eslint no-param-reassign:0*/ if (!params) {\n        return url;\n    }\n    var serializedParams;\n    if (paramsSerializer) {\n        serializedParams = paramsSerializer(params);\n    } else if (utils.isURLSearchParams(params)) {\n        serializedParams = params.toString();\n    } else {\n        var parts = [];\n        utils.forEach(params, function serialize(val, key) {\n            if (val === null || typeof val === \"undefined\") {\n                return;\n            }\n            if (utils.isArray(val)) {\n                key = key + \"[]\";\n            } else {\n                val = [\n                    val\n                ];\n            }\n            utils.forEach(val, function parseValue(v) {\n                if (utils.isDate(v)) {\n                    v = v.toISOString();\n                } else if (utils.isObject(v)) {\n                    v = JSON.stringify(v);\n                }\n                parts.push(encode(key) + \"=\" + encode(v));\n            });\n        });\n        serializedParams = parts.join(\"&\");\n    }\n    if (serializedParams) {\n        var hashmarkIndex = url.indexOf(\"#\");\n        if (hashmarkIndex !== -1) {\n            url = url.slice(0, hashmarkIndex);\n        }\n        url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + serializedParams;\n    }\n    return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLFNBQVNDLE9BQU9DLEdBQUc7SUFDakIsT0FBT0MsbUJBQW1CRCxLQUN4QkUsT0FBTyxDQUFDLFNBQVMsS0FDakJBLE9BQU8sQ0FBQyxRQUFRLEtBQ2hCQSxPQUFPLENBQUMsU0FBUyxLQUNqQkEsT0FBTyxDQUFDLFFBQVEsS0FDaEJBLE9BQU8sQ0FBQyxTQUFTLEtBQ2pCQSxPQUFPLENBQUMsU0FBUztBQUNyQjtBQUVBOzs7Ozs7Q0FNQyxHQUNEQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsU0FBU0MsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLGdCQUFnQjtJQUM5RCw0QkFBNEIsR0FDNUIsSUFBSSxDQUFDRCxRQUFRO1FBQ1gsT0FBT0Q7SUFDVDtJQUVBLElBQUlHO0lBQ0osSUFBSUQsa0JBQWtCO1FBQ3BCQyxtQkFBbUJELGlCQUFpQkQ7SUFDdEMsT0FBTyxJQUFJVixNQUFNYSxpQkFBaUIsQ0FBQ0gsU0FBUztRQUMxQ0UsbUJBQW1CRixPQUFPSSxRQUFRO0lBQ3BDLE9BQU87UUFDTCxJQUFJQyxRQUFRLEVBQUU7UUFFZGYsTUFBTWdCLE9BQU8sQ0FBQ04sUUFBUSxTQUFTTyxVQUFVZCxHQUFHLEVBQUVlLEdBQUc7WUFDL0MsSUFBSWYsUUFBUSxRQUFRLE9BQU9BLFFBQVEsYUFBYTtnQkFDOUM7WUFDRjtZQUVBLElBQUlILE1BQU1tQixPQUFPLENBQUNoQixNQUFNO2dCQUN0QmUsTUFBTUEsTUFBTTtZQUNkLE9BQU87Z0JBQ0xmLE1BQU07b0JBQUNBO2lCQUFJO1lBQ2I7WUFFQUgsTUFBTWdCLE9BQU8sQ0FBQ2IsS0FBSyxTQUFTaUIsV0FBV0MsQ0FBQztnQkFDdEMsSUFBSXJCLE1BQU1zQixNQUFNLENBQUNELElBQUk7b0JBQ25CQSxJQUFJQSxFQUFFRSxXQUFXO2dCQUNuQixPQUFPLElBQUl2QixNQUFNd0IsUUFBUSxDQUFDSCxJQUFJO29CQUM1QkEsSUFBSUksS0FBS0MsU0FBUyxDQUFDTDtnQkFDckI7Z0JBQ0FOLE1BQU1ZLElBQUksQ0FBQ3pCLE9BQU9nQixPQUFPLE1BQU1oQixPQUFPbUI7WUFDeEM7UUFDRjtRQUVBVCxtQkFBbUJHLE1BQU1hLElBQUksQ0FBQztJQUNoQztJQUVBLElBQUloQixrQkFBa0I7UUFDcEIsSUFBSWlCLGdCQUFnQnBCLElBQUlxQixPQUFPLENBQUM7UUFDaEMsSUFBSUQsa0JBQWtCLENBQUMsR0FBRztZQUN4QnBCLE1BQU1BLElBQUlzQixLQUFLLENBQUMsR0FBR0Y7UUFDckI7UUFFQXBCLE9BQU8sQ0FBQ0EsSUFBSXFCLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLEdBQUUsSUFBS2xCO0lBQ2pEO0lBRUEsT0FBT0g7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL0NoYXRBcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcz9jMDBjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiZW5jb2RlIiwidmFsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJidWlsZFVSTCIsInVybCIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJ0b1N0cmluZyIsInBhcnRzIiwiZm9yRWFjaCIsInNlcmlhbGl6ZSIsImtleSIsImlzQXJyYXkiLCJwYXJzZVZhbHVlIiwidiIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiaXNPYmplY3QiLCJKU09OIiwic3RyaW5naWZ5IiwicHVzaCIsImpvaW4iLCJoYXNobWFya0luZGV4IiwiaW5kZXhPZiIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/buildURL.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/combineURLs.js":
/*!***************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/combineURLs.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */ module.exports = function combineURLs(baseURL, relativeURL) {\n    return relativeURL ? baseURL.replace(/\\/+$/, \"\") + \"/\" + relativeURL.replace(/^\\/+/, \"\") : baseURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOzs7Ozs7Q0FNQyxHQUNEQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsWUFBWUMsT0FBTyxFQUFFQyxXQUFXO0lBQ3hELE9BQU9BLGNBQ0hELFFBQVFFLE9BQU8sQ0FBQyxRQUFRLE1BQU0sTUFBTUQsWUFBWUMsT0FBTyxDQUFDLFFBQVEsTUFDaEVGO0FBQ04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGF0QXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanM/MDcyYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNvbWJpbmVVUkxzIiwiYmFzZVVSTCIsInJlbGF0aXZlVVJMIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/combineURLs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/cookies.js":
/*!***********************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/cookies.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nmodule.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie\nfunction standardBrowserEnv() {\n    return {\n        write: function write(name, value, expires, path, domain, secure) {\n            var cookie = [];\n            cookie.push(name + \"=\" + encodeURIComponent(value));\n            if (utils.isNumber(expires)) {\n                cookie.push(\"expires=\" + new Date(expires).toGMTString());\n            }\n            if (utils.isString(path)) {\n                cookie.push(\"path=\" + path);\n            }\n            if (utils.isString(domain)) {\n                cookie.push(\"domain=\" + domain);\n            }\n            if (secure === true) {\n                cookie.push(\"secure\");\n            }\n            document.cookie = cookie.join(\"; \");\n        },\n        read: function read(name) {\n            var match = document.cookie.match(new RegExp(\"(^|;\\\\s*)(\" + name + \")=([^;]*)\"));\n            return match ? decodeURIComponent(match[3]) : null;\n        },\n        remove: function remove(name) {\n            this.write(name, \"\", Date.now() - 86400000);\n        }\n    };\n}() : // Non standard browser env (web workers, react-native) lack needed support.\nfunction nonStandardBrowserEnv() {\n    return {\n        write: function write() {},\n        read: function read() {\n            return null;\n        },\n        remove: function remove() {}\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEJDLE9BQU9DLE9BQU8sR0FDWkgsTUFBTUksb0JBQW9CLEtBR3hCLGdEQUQ4QztBQUM3QyxTQUFTQztJQUNSLE9BQU87UUFDTEMsT0FBTyxTQUFTQSxNQUFNQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsTUFBTTtZQUM5RCxJQUFJQyxTQUFTLEVBQUU7WUFDZkEsT0FBT0MsSUFBSSxDQUFDUCxPQUFPLE1BQU1RLG1CQUFtQlA7WUFFNUMsSUFBSVIsTUFBTWdCLFFBQVEsQ0FBQ1AsVUFBVTtnQkFDM0JJLE9BQU9DLElBQUksQ0FBQyxhQUFhLElBQUlHLEtBQUtSLFNBQVNTLFdBQVc7WUFDeEQ7WUFFQSxJQUFJbEIsTUFBTW1CLFFBQVEsQ0FBQ1QsT0FBTztnQkFDeEJHLE9BQU9DLElBQUksQ0FBQyxVQUFVSjtZQUN4QjtZQUVBLElBQUlWLE1BQU1tQixRQUFRLENBQUNSLFNBQVM7Z0JBQzFCRSxPQUFPQyxJQUFJLENBQUMsWUFBWUg7WUFDMUI7WUFFQSxJQUFJQyxXQUFXLE1BQU07Z0JBQ25CQyxPQUFPQyxJQUFJLENBQUM7WUFDZDtZQUVBTSxTQUFTUCxNQUFNLEdBQUdBLE9BQU9RLElBQUksQ0FBQztRQUNoQztRQUVBQyxNQUFNLFNBQVNBLEtBQUtmLElBQUk7WUFDdEIsSUFBSWdCLFFBQVFILFNBQVNQLE1BQU0sQ0FBQ1UsS0FBSyxDQUFDLElBQUlDLE9BQU8sZUFBZWpCLE9BQU87WUFDbkUsT0FBUWdCLFFBQVFFLG1CQUFtQkYsS0FBSyxDQUFDLEVBQUUsSUFBSTtRQUNqRDtRQUVBRyxRQUFRLFNBQVNBLE9BQU9uQixJQUFJO1lBQzFCLElBQUksQ0FBQ0QsS0FBSyxDQUFDQyxNQUFNLElBQUlVLEtBQUtVLEdBQUcsS0FBSztRQUNwQztJQUNGO0FBQ0YsTUFHQSw0RUFEMEU7QUFDekUsU0FBU0M7SUFDUixPQUFPO1FBQ0x0QixPQUFPLFNBQVNBLFNBQVM7UUFDekJnQixNQUFNLFNBQVNBO1lBQVMsT0FBTztRQUFNO1FBQ3JDSSxRQUFRLFNBQVNBLFVBQVU7SUFDN0I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL0NoYXRBcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzPzI4N2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzU3RhbmRhcmRCcm93c2VyRW52Iiwic3RhbmRhcmRCcm93c2VyRW52Iiwid3JpdGUiLCJuYW1lIiwidmFsdWUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInB1c2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImlzU3RyaW5nIiwiZG9jdW1lbnQiLCJqb2luIiwicmVhZCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93Iiwibm9uU3RhbmRhcmRCcm93c2VyRW52Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */ module.exports = function isAbsoluteURL(url) {\n    // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n    // by any combination of letters, digits, plus, period, or hyphen.\n    return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7Ozs7O0NBS0MsR0FDREEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGNBQWNDLEdBQUc7SUFDekMsZ0dBQWdHO0lBQ2hHLGdHQUFnRztJQUNoRyxrRUFBa0U7SUFDbEUsT0FBTyw4QkFBOEJDLElBQUksQ0FBQ0Q7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGF0QXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcz8wNWQ2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImlzQWJzb2x1dGVVUkwiLCJ1cmwiLCJ0ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/isAbsoluteURL.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/isAxiosError.js":
/*!****************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/isAxiosError.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */ module.exports = function isAxiosError(payload) {\n    return utils.isObject(payload) && payload.isAxiosError === true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQjs7Ozs7Q0FLQyxHQUNEQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsYUFBYUMsT0FBTztJQUM1QyxPQUFPTCxNQUFNTSxRQUFRLENBQUNELFlBQWFBLFFBQVFELFlBQVksS0FBSztBQUM5RCIsInNvdXJjZXMiOlsid2VicGFjazovL0NoYXRBcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanM/NTA3YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNBeGlvc0Vycm9yIiwicGF5bG9hZCIsImlzT2JqZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/isAxiosError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nmodule.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\nfunction standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement(\"a\");\n    var originURL;\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */ function resolveURL(url) {\n        var href = url;\n        if (msie) {\n            // IE needs attribute set twice to normalize properties\n            urlParsingNode.setAttribute(\"href\", href);\n            href = urlParsingNode.href;\n        }\n        urlParsingNode.setAttribute(\"href\", href);\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n            href: urlParsingNode.href,\n            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \"\") : \"\",\n            host: urlParsingNode.host,\n            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, \"\") : \"\",\n            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \"\") : \"\",\n            hostname: urlParsingNode.hostname,\n            port: urlParsingNode.port,\n            pathname: urlParsingNode.pathname.charAt(0) === \"/\" ? urlParsingNode.pathname : \"/\" + urlParsingNode.pathname\n        };\n    }\n    originURL = resolveURL(window.location.href);\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */ return function isURLSameOrigin(requestURL) {\n        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;\n        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;\n    };\n}() : // Non standard browser envs (web workers, react-native) lack needed support.\nfunction nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n        return true;\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQkMsT0FBT0MsT0FBTyxHQUNaSCxNQUFNSSxvQkFBb0IsS0FJeEIscUVBRm1FO0FBQ3JFLHFFQUFxRTtBQUNsRSxTQUFTQztJQUNSLElBQUlDLE9BQU8sa0JBQWtCQyxJQUFJLENBQUNDLFVBQVVDLFNBQVM7SUFDckQsSUFBSUMsaUJBQWlCQyxTQUFTQyxhQUFhLENBQUM7SUFDNUMsSUFBSUM7SUFFSjs7Ozs7SUFLRixHQUNFLFNBQVNDLFdBQVdDLEdBQUc7UUFDckIsSUFBSUMsT0FBT0Q7UUFFWCxJQUFJVCxNQUFNO1lBQ1YsdURBQXVEO1lBQ3JESSxlQUFlTyxZQUFZLENBQUMsUUFBUUQ7WUFDcENBLE9BQU9OLGVBQWVNLElBQUk7UUFDNUI7UUFFQU4sZUFBZU8sWUFBWSxDQUFDLFFBQVFEO1FBRXBDLHdGQUF3RjtRQUN4RixPQUFPO1lBQ0xBLE1BQU1OLGVBQWVNLElBQUk7WUFDekJFLFVBQVVSLGVBQWVRLFFBQVEsR0FBR1IsZUFBZVEsUUFBUSxDQUFDQyxPQUFPLENBQUMsTUFBTSxNQUFNO1lBQ2hGQyxNQUFNVixlQUFlVSxJQUFJO1lBQ3pCQyxRQUFRWCxlQUFlVyxNQUFNLEdBQUdYLGVBQWVXLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDLE9BQU8sTUFBTTtZQUMzRUcsTUFBTVosZUFBZVksSUFBSSxHQUFHWixlQUFlWSxJQUFJLENBQUNILE9BQU8sQ0FBQyxNQUFNLE1BQU07WUFDcEVJLFVBQVViLGVBQWVhLFFBQVE7WUFDakNDLE1BQU1kLGVBQWVjLElBQUk7WUFDekJDLFVBQVUsZUFBZ0JBLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDLE9BQU8sTUFDL0NoQixlQUFlZSxRQUFRLEdBQ3ZCLE1BQU1mLGVBQWVlLFFBQVE7UUFDakM7SUFDRjtJQUVBWixZQUFZQyxXQUFXYSxPQUFPQyxRQUFRLENBQUNaLElBQUk7SUFFM0M7Ozs7O0lBS0YsR0FDRSxPQUFPLFNBQVNhLGdCQUFnQkMsVUFBVTtRQUN4QyxJQUFJQyxTQUFTLE1BQU9DLFFBQVEsQ0FBQ0YsY0FBZWhCLFdBQVdnQixjQUFjQTtRQUNyRSxPQUFRQyxPQUFPYixRQUFRLEtBQUtMLFVBQVVLLFFBQVEsSUFDMUNhLE9BQU9YLElBQUksS0FBS1AsVUFBVU8sSUFBSTtJQUNwQztBQUNGLE1BR0EsNkVBRDJFO0FBQzFFLFNBQVNhO0lBQ1IsT0FBTyxTQUFTSjtRQUNkLE9BQU87SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcz80NTY5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzU3RhbmRhcmRCcm93c2VyRW52Iiwic3RhbmRhcmRCcm93c2VyRW52IiwibXNpZSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJ1cmwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJyZXBsYWNlIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaXNVUkxTYW1lT3JpZ2luIiwicmVxdWVzdFVSTCIsInBhcnNlZCIsImlzU3RyaW5nIiwibm9uU3RhbmRhcmRCcm93c2VyRW52Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/isURLSameOrigin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n    utils.forEach(headers, function processHeader(value, name) {\n        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n            headers[normalizedName] = value;\n            delete headers[name];\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEJDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxvQkFBb0JDLE9BQU8sRUFBRUMsY0FBYztJQUNuRU4sTUFBTU8sT0FBTyxDQUFDRixTQUFTLFNBQVNHLGNBQWNDLEtBQUssRUFBRUMsSUFBSTtRQUN2RCxJQUFJQSxTQUFTSixrQkFBa0JJLEtBQUtDLFdBQVcsT0FBT0wsZUFBZUssV0FBVyxJQUFJO1lBQ2xGTixPQUFPLENBQUNDLGVBQWUsR0FBR0c7WUFDMUIsT0FBT0osT0FBTyxDQUFDSyxLQUFLO1FBQ3RCO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL0NoYXRBcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzP2IwMzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiaGVhZGVycyIsIm5vcm1hbGl6ZWROYW1lIiwiZm9yRWFjaCIsInByb2Nlc3NIZWFkZXIiLCJ2YWx1ZSIsIm5hbWUiLCJ0b1VwcGVyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/normalizeHeaderName.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/parseHeaders.js":
/*!****************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/parseHeaders.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\");\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n    \"age\",\n    \"authorization\",\n    \"content-length\",\n    \"content-type\",\n    \"etag\",\n    \"expires\",\n    \"from\",\n    \"host\",\n    \"if-modified-since\",\n    \"if-unmodified-since\",\n    \"last-modified\",\n    \"location\",\n    \"max-forwards\",\n    \"proxy-authorization\",\n    \"referer\",\n    \"retry-after\",\n    \"user-agent\"\n];\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */ module.exports = function parseHeaders(headers) {\n    var parsed = {};\n    var key;\n    var val;\n    var i;\n    if (!headers) {\n        return parsed;\n    }\n    utils.forEach(headers.split(\"\\n\"), function parser(line) {\n        i = line.indexOf(\":\");\n        key = utils.trim(line.substr(0, i)).toLowerCase();\n        val = utils.trim(line.substr(i + 1));\n        if (key) {\n            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n                return;\n            }\n            if (key === \"set-cookie\") {\n                parsed[key] = (parsed[key] ? parsed[key] : []).concat([\n                    val\n                ]);\n            } else {\n                parsed[key] = parsed[key] ? parsed[key] + \", \" + val : val;\n            }\n        }\n    });\n    return parsed;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQiwrQ0FBK0M7QUFDL0MsNkRBQTZEO0FBQzdELElBQUlDLG9CQUFvQjtJQUN0QjtJQUFPO0lBQWlCO0lBQWtCO0lBQWdCO0lBQzFEO0lBQVc7SUFBUTtJQUFRO0lBQXFCO0lBQ2hEO0lBQWlCO0lBQVk7SUFBZ0I7SUFDN0M7SUFBVztJQUFlO0NBQzNCO0FBRUQ7Ozs7Ozs7Ozs7OztDQVlDLEdBQ0RDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxhQUFhQyxPQUFPO0lBQzVDLElBQUlDLFNBQVMsQ0FBQztJQUNkLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUVKLElBQUksQ0FBQ0osU0FBUztRQUFFLE9BQU9DO0lBQVE7SUFFL0JQLE1BQU1XLE9BQU8sQ0FBQ0wsUUFBUU0sS0FBSyxDQUFDLE9BQU8sU0FBU0MsT0FBT0MsSUFBSTtRQUNyREosSUFBSUksS0FBS0MsT0FBTyxDQUFDO1FBQ2pCUCxNQUFNUixNQUFNZ0IsSUFBSSxDQUFDRixLQUFLRyxNQUFNLENBQUMsR0FBR1AsSUFBSVEsV0FBVztRQUMvQ1QsTUFBTVQsTUFBTWdCLElBQUksQ0FBQ0YsS0FBS0csTUFBTSxDQUFDUCxJQUFJO1FBRWpDLElBQUlGLEtBQUs7WUFDUCxJQUFJRCxNQUFNLENBQUNDLElBQUksSUFBSU4sa0JBQWtCYSxPQUFPLENBQUNQLFFBQVEsR0FBRztnQkFDdEQ7WUFDRjtZQUNBLElBQUlBLFFBQVEsY0FBYztnQkFDeEJELE1BQU0sQ0FBQ0MsSUFBSSxHQUFHLENBQUNELE1BQU0sQ0FBQ0MsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUksR0FBRyxFQUFFLEVBQUVXLE1BQU0sQ0FBQztvQkFBQ1Y7aUJBQUk7WUFDN0QsT0FBTztnQkFDTEYsTUFBTSxDQUFDQyxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUksR0FBRyxPQUFPQyxNQUFNQTtZQUN6RDtRQUNGO0lBQ0Y7SUFFQSxPQUFPRjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2hhdEFwcC8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcz84YmFmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiaWdub3JlRHVwbGljYXRlT2YiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2VIZWFkZXJzIiwiaGVhZGVycyIsInBhcnNlZCIsImtleSIsInZhbCIsImkiLCJmb3JFYWNoIiwic3BsaXQiLCJwYXJzZXIiLCJsaW5lIiwiaW5kZXhPZiIsInRyaW0iLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/parseHeaders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/spread.js":
/*!**********************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/spread.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */ module.exports = function spread(callback) {\n    return function wrap(arr) {\n        return callback.apply(null, arr);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1CQyxHQUNEQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsT0FBT0MsUUFBUTtJQUN2QyxPQUFPLFNBQVNDLEtBQUtDLEdBQUc7UUFDdEIsT0FBT0YsU0FBU0csS0FBSyxDQUFDLE1BQU1EO0lBQzlCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGF0QXBwLy4vbm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzPzQwNTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzcHJlYWQiLCJjYWxsYmFjayIsIndyYXAiLCJhcnIiLCJhcHBseSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/spread.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/validator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/helpers/validator.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar VERSION = (__webpack_require__(/*! ../env/data */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/env/data.js\").version);\nvar validators = {};\n// eslint-disable-next-line func-names\n[\n    \"object\",\n    \"boolean\",\n    \"number\",\n    \"function\",\n    \"string\",\n    \"symbol\"\n].forEach(function(type, i) {\n    validators[type] = function validator(thing) {\n        return typeof thing === type || \"a\" + (i < 1 ? \"n \" : \" \") + type;\n    };\n});\nvar deprecatedWarnings = {};\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */ validators.transitional = function transitional(validator, version, message) {\n    function formatMessage(opt, desc) {\n        return \"[Axios v\" + VERSION + \"] Transitional option '\" + opt + \"'\" + desc + (message ? \". \" + message : \"\");\n    }\n    // eslint-disable-next-line func-names\n    return function(value, opt, opts) {\n        if (validator === false) {\n            throw new Error(formatMessage(opt, \" has been removed\" + (version ? \" in \" + version : \"\")));\n        }\n        if (version && !deprecatedWarnings[opt]) {\n            deprecatedWarnings[opt] = true;\n            // eslint-disable-next-line no-console\n            console.warn(formatMessage(opt, \" has been deprecated since v\" + version + \" and will be removed in the near future\"));\n        }\n        return validator ? validator(value, opt, opts) : true;\n    };\n};\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */ function assertOptions(options, schema, allowUnknown) {\n    if (typeof options !== \"object\") {\n        throw new TypeError(\"options must be an object\");\n    }\n    var keys = Object.keys(options);\n    var i = keys.length;\n    while(i-- > 0){\n        var opt = keys[i];\n        var validator = schema[opt];\n        if (validator) {\n            var value = options[opt];\n            var result = value === undefined || validator(value, opt, options);\n            if (result !== true) {\n                throw new TypeError(\"option \" + opt + \" must be \" + result);\n            }\n            continue;\n        }\n        if (allowUnknown !== true) {\n            throw Error(\"Unknown option \" + opt);\n        }\n    }\n}\nmodule.exports = {\n    assertOptions: assertOptions,\n    validators: validators\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxVQUFVQyxrSEFBOEI7QUFFNUMsSUFBSUUsYUFBYSxDQUFDO0FBRWxCLHNDQUFzQztBQUN0QztJQUFDO0lBQVU7SUFBVztJQUFVO0lBQVk7SUFBVTtDQUFTLENBQUNDLE9BQU8sQ0FBQyxTQUFTQyxJQUFJLEVBQUVDLENBQUM7SUFDdEZILFVBQVUsQ0FBQ0UsS0FBSyxHQUFHLFNBQVNFLFVBQVVDLEtBQUs7UUFDekMsT0FBTyxPQUFPQSxVQUFVSCxRQUFRLE1BQU9DLENBQUFBLElBQUksSUFBSSxPQUFPLEdBQUUsSUFBS0Q7SUFDL0Q7QUFDRjtBQUVBLElBQUlJLHFCQUFxQixDQUFDO0FBRTFCOzs7Ozs7Q0FNQyxHQUNETixXQUFXTyxZQUFZLEdBQUcsU0FBU0EsYUFBYUgsU0FBUyxFQUFFTCxPQUFPLEVBQUVTLE9BQU87SUFDekUsU0FBU0MsY0FBY0MsR0FBRyxFQUFFQyxJQUFJO1FBQzlCLE9BQU8sYUFBYWQsVUFBVSw0QkFBNkJhLE1BQU0sTUFBT0MsT0FBUUgsQ0FBQUEsVUFBVSxPQUFPQSxVQUFVLEVBQUM7SUFDOUc7SUFFQSxzQ0FBc0M7SUFDdEMsT0FBTyxTQUFTSSxLQUFLLEVBQUVGLEdBQUcsRUFBRUcsSUFBSTtRQUM5QixJQUFJVCxjQUFjLE9BQU87WUFDdkIsTUFBTSxJQUFJVSxNQUFNTCxjQUFjQyxLQUFLLHNCQUF1QlgsQ0FBQUEsVUFBVSxTQUFTQSxVQUFVLEVBQUM7UUFDMUY7UUFFQSxJQUFJQSxXQUFXLENBQUNPLGtCQUFrQixDQUFDSSxJQUFJLEVBQUU7WUFDdkNKLGtCQUFrQixDQUFDSSxJQUFJLEdBQUc7WUFDMUIsc0NBQXNDO1lBQ3RDSyxRQUFRQyxJQUFJLENBQ1ZQLGNBQ0VDLEtBQ0EsaUNBQWlDWCxVQUFVO1FBR2pEO1FBRUEsT0FBT0ssWUFBWUEsVUFBVVEsT0FBT0YsS0FBS0csUUFBUTtJQUNuRDtBQUNGO0FBRUE7Ozs7O0NBS0MsR0FFRCxTQUFTSSxjQUFjQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsWUFBWTtJQUNsRCxJQUFJLE9BQU9GLFlBQVksVUFBVTtRQUMvQixNQUFNLElBQUlHLFVBQVU7SUFDdEI7SUFDQSxJQUFJQyxPQUFPQyxPQUFPRCxJQUFJLENBQUNKO0lBQ3ZCLElBQUlmLElBQUltQixLQUFLRSxNQUFNO0lBQ25CLE1BQU9yQixNQUFNLEVBQUc7UUFDZCxJQUFJTyxNQUFNWSxJQUFJLENBQUNuQixFQUFFO1FBQ2pCLElBQUlDLFlBQVllLE1BQU0sQ0FBQ1QsSUFBSTtRQUMzQixJQUFJTixXQUFXO1lBQ2IsSUFBSVEsUUFBUU0sT0FBTyxDQUFDUixJQUFJO1lBQ3hCLElBQUllLFNBQVNiLFVBQVVjLGFBQWF0QixVQUFVUSxPQUFPRixLQUFLUTtZQUMxRCxJQUFJTyxXQUFXLE1BQU07Z0JBQ25CLE1BQU0sSUFBSUosVUFBVSxZQUFZWCxNQUFNLGNBQWNlO1lBQ3REO1lBQ0E7UUFDRjtRQUNBLElBQUlMLGlCQUFpQixNQUFNO1lBQ3pCLE1BQU1OLE1BQU0sb0JBQW9CSjtRQUNsQztJQUNGO0FBQ0Y7QUFFQWlCLE9BQU9DLE9BQU8sR0FBRztJQUNmWCxlQUFlQTtJQUNmakIsWUFBWUE7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL0NoYXRBcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanM/ZTQ1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSkpO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIl0sIm5hbWVzIjpbIlZFUlNJT04iLCJyZXF1aXJlIiwidmVyc2lvbiIsInZhbGlkYXRvcnMiLCJmb3JFYWNoIiwidHlwZSIsImkiLCJ2YWxpZGF0b3IiLCJ0aGluZyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInRyYW5zaXRpb25hbCIsIm1lc3NhZ2UiLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsInZhbHVlIiwib3B0cyIsIkVycm9yIiwiY29uc29sZSIsIndhcm4iLCJhc3NlcnRPcHRpb25zIiwib3B0aW9ucyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIlR5cGVFcnJvciIsImtleXMiLCJPYmplY3QiLCJsZW5ndGgiLCJyZXN1bHQiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/openai/node_modules/axios/lib/utils.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"(rsc)/./node_modules/openai/node_modules/axios/lib/helpers/bind.js\");\n// utils is a library of generic helper functions non-specific to axios\nvar toString = Object.prototype.toString;\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */ function isArray(val) {\n    return Array.isArray(val);\n}\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */ function isUndefined(val) {\n    return typeof val === \"undefined\";\n}\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */ function isBuffer(val) {\n    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === \"function\" && val.constructor.isBuffer(val);\n}\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */ function isArrayBuffer(val) {\n    return toString.call(val) === \"[object ArrayBuffer]\";\n}\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */ function isFormData(val) {\n    return toString.call(val) === \"[object FormData]\";\n}\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */ function isArrayBufferView(val) {\n    var result;\n    if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView) {\n        result = ArrayBuffer.isView(val);\n    } else {\n        result = val && val.buffer && isArrayBuffer(val.buffer);\n    }\n    return result;\n}\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */ function isString(val) {\n    return typeof val === \"string\";\n}\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */ function isNumber(val) {\n    return typeof val === \"number\";\n}\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */ function isObject(val) {\n    return val !== null && typeof val === \"object\";\n}\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */ function isPlainObject(val) {\n    if (toString.call(val) !== \"[object Object]\") {\n        return false;\n    }\n    var prototype = Object.getPrototypeOf(val);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */ function isDate(val) {\n    return toString.call(val) === \"[object Date]\";\n}\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */ function isFile(val) {\n    return toString.call(val) === \"[object File]\";\n}\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */ function isBlob(val) {\n    return toString.call(val) === \"[object Blob]\";\n}\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */ function isFunction(val) {\n    return toString.call(val) === \"[object Function]\";\n}\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */ function isStream(val) {\n    return isObject(val) && isFunction(val.pipe);\n}\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */ function isURLSearchParams(val) {\n    return toString.call(val) === \"[object URLSearchParams]\";\n}\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */ function trim(str) {\n    return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, \"\");\n}\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */ function isStandardBrowserEnv() {\n    if (typeof navigator !== \"undefined\" && (navigator.product === \"ReactNative\" || navigator.product === \"NativeScript\" || navigator.product === \"NS\")) {\n        return false;\n    }\n    return  false && 0;\n}\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */ function forEach(obj, fn) {\n    // Don't bother if no value provided\n    if (obj === null || typeof obj === \"undefined\") {\n        return;\n    }\n    // Force an array if not already something iterable\n    if (typeof obj !== \"object\") {\n        /*eslint no-param-reassign:0*/ obj = [\n            obj\n        ];\n    }\n    if (isArray(obj)) {\n        // Iterate over array values\n        for(var i = 0, l = obj.length; i < l; i++){\n            fn.call(null, obj[i], i, obj);\n        }\n    } else {\n        // Iterate over object keys\n        for(var key in obj){\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                fn.call(null, obj[key], key, obj);\n            }\n        }\n    }\n}\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */ function merge() {\n    var result = {};\n    function assignValue(val, key) {\n        if (isPlainObject(result[key]) && isPlainObject(val)) {\n            result[key] = merge(result[key], val);\n        } else if (isPlainObject(val)) {\n            result[key] = merge({}, val);\n        } else if (isArray(val)) {\n            result[key] = val.slice();\n        } else {\n            result[key] = val;\n        }\n    }\n    for(var i = 0, l = arguments.length; i < l; i++){\n        forEach(arguments[i], assignValue);\n    }\n    return result;\n}\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */ function extend(a, b, thisArg) {\n    forEach(b, function assignValue(val, key) {\n        if (thisArg && typeof val === \"function\") {\n            a[key] = bind(val, thisArg);\n        } else {\n            a[key] = val;\n        }\n    });\n    return a;\n}\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */ function stripBOM(content) {\n    if (content.charCodeAt(0) === 0xFEFF) {\n        content = content.slice(1);\n    }\n    return content;\n}\nmodule.exports = {\n    isArray: isArray,\n    isArrayBuffer: isArrayBuffer,\n    isBuffer: isBuffer,\n    isFormData: isFormData,\n    isArrayBufferView: isArrayBufferView,\n    isString: isString,\n    isNumber: isNumber,\n    isObject: isObject,\n    isPlainObject: isPlainObject,\n    isUndefined: isUndefined,\n    isDate: isDate,\n    isFile: isFile,\n    isBlob: isBlob,\n    isFunction: isFunction,\n    isStream: isStream,\n    isURLSearchParams: isURLSearchParams,\n    isStandardBrowserEnv: isStandardBrowserEnv,\n    forEach: forEach,\n    merge: merge,\n    extend: extend,\n    trim: trim,\n    stripBOM: stripBOM\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/axios/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/form-data/lib/form_data.js":
/*!*********************************************************************!*\
  !*** ./node_modules/openai/node_modules/form-data/lib/form_data.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar CombinedStream = __webpack_require__(/*! combined-stream */ \"(rsc)/./node_modules/combined-stream/lib/combined_stream.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar parseUrl = (__webpack_require__(/*! url */ \"url\").parse);\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar mime = __webpack_require__(/*! mime-types */ \"(rsc)/./node_modules/mime-types/index.js\");\nvar asynckit = __webpack_require__(/*! asynckit */ \"(rsc)/./node_modules/asynckit/index.js\");\nvar populate = __webpack_require__(/*! ./populate.js */ \"(rsc)/./node_modules/openai/node_modules/form-data/lib/populate.js\");\n// Public API\nmodule.exports = FormData;\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */ function FormData(options) {\n    if (!(this instanceof FormData)) {\n        return new FormData(options);\n    }\n    this._overheadLength = 0;\n    this._valueLength = 0;\n    this._valuesToMeasure = [];\n    CombinedStream.call(this);\n    options = options || {};\n    for(var option in options){\n        this[option] = options[option];\n    }\n}\nFormData.LINE_BREAK = \"\\r\\n\";\nFormData.DEFAULT_CONTENT_TYPE = \"application/octet-stream\";\nFormData.prototype.append = function(field, value, options) {\n    options = options || {};\n    // allow filename as single option\n    if (typeof options == \"string\") {\n        options = {\n            filename: options\n        };\n    }\n    var append = CombinedStream.prototype.append.bind(this);\n    // all that streamy business can't handle numbers\n    if (typeof value == \"number\") {\n        value = \"\" + value;\n    }\n    // https://github.com/felixge/node-form-data/issues/38\n    if (util.isArray(value)) {\n        // Please convert your array into string\n        // the way web server expects it\n        this._error(new Error(\"Arrays are not supported.\"));\n        return;\n    }\n    var header = this._multiPartHeader(field, value, options);\n    var footer = this._multiPartFooter();\n    append(header);\n    append(value);\n    append(footer);\n    // pass along options.knownLength\n    this._trackLength(header, value, options);\n};\nFormData.prototype._trackLength = function(header, value, options) {\n    var valueLength = 0;\n    // used w/ getLengthSync(), when length is known.\n    // e.g. for streaming directly from a remote server,\n    // w/ a known file a size, and not wanting to wait for\n    // incoming file to finish to get its size.\n    if (options.knownLength != null) {\n        valueLength += +options.knownLength;\n    } else if (Buffer.isBuffer(value)) {\n        valueLength = value.length;\n    } else if (typeof value === \"string\") {\n        valueLength = Buffer.byteLength(value);\n    }\n    this._valueLength += valueLength;\n    // @check why add CRLF? does this account for custom/multiple CRLFs?\n    this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;\n    // empty or either doesn't have path or not an http response or not a stream\n    if (!value || !value.path && !(value.readable && value.hasOwnProperty(\"httpVersion\")) && !(value instanceof Stream)) {\n        return;\n    }\n    // no need to bother with the length\n    if (!options.knownLength) {\n        this._valuesToMeasure.push(value);\n    }\n};\nFormData.prototype._lengthRetriever = function(value, callback) {\n    if (value.hasOwnProperty(\"fd\")) {\n        // take read range into a account\n        // `end` = Infinity –> read file till the end\n        //\n        // TODO: Looks like there is bug in Node fs.createReadStream\n        // it doesn't respect `end` options without `start` options\n        // Fix it when node fixes it.\n        // https://github.com/joyent/node/issues/7819\n        if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n            // when end specified\n            // no need to calculate range\n            // inclusive, starts with 0\n            callback(null, value.end + 1 - (value.start ? value.start : 0));\n        // not that fast snoopy\n        } else {\n            // still need to fetch file size from fs\n            fs.stat(value.path, function(err, stat) {\n                var fileSize;\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                // update final size based on the range options\n                fileSize = stat.size - (value.start ? value.start : 0);\n                callback(null, fileSize);\n            });\n        }\n    // or http response\n    } else if (value.hasOwnProperty(\"httpVersion\")) {\n        callback(null, +value.headers[\"content-length\"]);\n    // or request stream http://github.com/mikeal/request\n    } else if (value.hasOwnProperty(\"httpModule\")) {\n        // wait till response come back\n        value.on(\"response\", function(response) {\n            value.pause();\n            callback(null, +response.headers[\"content-length\"]);\n        });\n        value.resume();\n    // something else\n    } else {\n        callback(\"Unknown stream\");\n    }\n};\nFormData.prototype._multiPartHeader = function(field, value, options) {\n    // custom header specified (as string)?\n    // it becomes responsible for boundary\n    // (e.g. to handle extra CRLFs on .NET servers)\n    if (typeof options.header == \"string\") {\n        return options.header;\n    }\n    var contentDisposition = this._getContentDisposition(value, options);\n    var contentType = this._getContentType(value, options);\n    var contents = \"\";\n    var headers = {\n        // add custom disposition as third element or keep it two elements if not\n        \"Content-Disposition\": [\n            \"form-data\",\n            'name=\"' + field + '\"'\n        ].concat(contentDisposition || []),\n        // if no content type. allow it to be empty array\n        \"Content-Type\": [].concat(contentType || [])\n    };\n    // allow custom headers.\n    if (typeof options.header == \"object\") {\n        populate(headers, options.header);\n    }\n    var header;\n    for(var prop in headers){\n        if (!headers.hasOwnProperty(prop)) continue;\n        header = headers[prop];\n        // skip nullish headers.\n        if (header == null) {\n            continue;\n        }\n        // convert all headers to arrays.\n        if (!Array.isArray(header)) {\n            header = [\n                header\n            ];\n        }\n        // add non-empty headers.\n        if (header.length) {\n            contents += prop + \": \" + header.join(\"; \") + FormData.LINE_BREAK;\n        }\n    }\n    return \"--\" + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\nFormData.prototype._getContentDisposition = function(value, options) {\n    var filename, contentDisposition;\n    if (typeof options.filepath === \"string\") {\n        // custom filepath for relative paths\n        filename = path.normalize(options.filepath).replace(/\\\\/g, \"/\");\n    } else if (options.filename || value.name || value.path) {\n        // custom filename take precedence\n        // formidable and the browser add a name property\n        // fs- and request- streams have path property\n        filename = path.basename(options.filename || value.name || value.path);\n    } else if (value.readable && value.hasOwnProperty(\"httpVersion\")) {\n        // or try http response\n        filename = path.basename(value.client._httpMessage.path || \"\");\n    }\n    if (filename) {\n        contentDisposition = 'filename=\"' + filename + '\"';\n    }\n    return contentDisposition;\n};\nFormData.prototype._getContentType = function(value, options) {\n    // use custom content-type above all\n    var contentType = options.contentType;\n    // or try `name` from formidable, browser\n    if (!contentType && value.name) {\n        contentType = mime.lookup(value.name);\n    }\n    // or try `path` from fs-, request- streams\n    if (!contentType && value.path) {\n        contentType = mime.lookup(value.path);\n    }\n    // or if it's http-reponse\n    if (!contentType && value.readable && value.hasOwnProperty(\"httpVersion\")) {\n        contentType = value.headers[\"content-type\"];\n    }\n    // or guess it from the filepath or filename\n    if (!contentType && (options.filepath || options.filename)) {\n        contentType = mime.lookup(options.filepath || options.filename);\n    }\n    // fallback to the default content type if `value` is not simple value\n    if (!contentType && typeof value == \"object\") {\n        contentType = FormData.DEFAULT_CONTENT_TYPE;\n    }\n    return contentType;\n};\nFormData.prototype._multiPartFooter = function() {\n    return (function(next) {\n        var footer = FormData.LINE_BREAK;\n        var lastPart = this._streams.length === 0;\n        if (lastPart) {\n            footer += this._lastBoundary();\n        }\n        next(footer);\n    }).bind(this);\n};\nFormData.prototype._lastBoundary = function() {\n    return \"--\" + this.getBoundary() + \"--\" + FormData.LINE_BREAK;\n};\nFormData.prototype.getHeaders = function(userHeaders) {\n    var header;\n    var formHeaders = {\n        \"content-type\": \"multipart/form-data; boundary=\" + this.getBoundary()\n    };\n    for(header in userHeaders){\n        if (userHeaders.hasOwnProperty(header)) {\n            formHeaders[header.toLowerCase()] = userHeaders[header];\n        }\n    }\n    return formHeaders;\n};\nFormData.prototype.setBoundary = function(boundary) {\n    this._boundary = boundary;\n};\nFormData.prototype.getBoundary = function() {\n    if (!this._boundary) {\n        this._generateBoundary();\n    }\n    return this._boundary;\n};\nFormData.prototype.getBuffer = function() {\n    var dataBuffer = new Buffer.alloc(0);\n    var boundary = this.getBoundary();\n    // Create the form content. Add Line breaks to the end of data.\n    for(var i = 0, len = this._streams.length; i < len; i++){\n        if (typeof this._streams[i] !== \"function\") {\n            // Add content to the buffer.\n            if (Buffer.isBuffer(this._streams[i])) {\n                dataBuffer = Buffer.concat([\n                    dataBuffer,\n                    this._streams[i]\n                ]);\n            } else {\n                dataBuffer = Buffer.concat([\n                    dataBuffer,\n                    Buffer.from(this._streams[i])\n                ]);\n            }\n            // Add break after content.\n            if (typeof this._streams[i] !== \"string\" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {\n                dataBuffer = Buffer.concat([\n                    dataBuffer,\n                    Buffer.from(FormData.LINE_BREAK)\n                ]);\n            }\n        }\n    }\n    // Add the footer and return the Buffer object.\n    return Buffer.concat([\n        dataBuffer,\n        Buffer.from(this._lastBoundary())\n    ]);\n};\nFormData.prototype._generateBoundary = function() {\n    // This generates a 50 character boundary similar to those used by Firefox.\n    // They are optimized for boyer-moore parsing.\n    var boundary = \"--------------------------\";\n    for(var i = 0; i < 24; i++){\n        boundary += Math.floor(Math.random() * 10).toString(16);\n    }\n    this._boundary = boundary;\n};\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n    var knownLength = this._overheadLength + this._valueLength;\n    // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n    // so it basically checks if there is any value added to the form\n    if (this._streams.length) {\n        knownLength += this._lastBoundary().length;\n    }\n    // https://github.com/form-data/form-data/issues/40\n    if (!this.hasKnownLength()) {\n        // Some async length retrievers are present\n        // therefore synchronous length calculation is false.\n        // Please use getLength(callback) to get proper length\n        this._error(new Error(\"Cannot calculate proper length in synchronous way.\"));\n    }\n    return knownLength;\n};\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n    var hasKnownLength = true;\n    if (this._valuesToMeasure.length) {\n        hasKnownLength = false;\n    }\n    return hasKnownLength;\n};\nFormData.prototype.getLength = function(cb) {\n    var knownLength = this._overheadLength + this._valueLength;\n    if (this._streams.length) {\n        knownLength += this._lastBoundary().length;\n    }\n    if (!this._valuesToMeasure.length) {\n        process.nextTick(cb.bind(this, null, knownLength));\n        return;\n    }\n    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n        if (err) {\n            cb(err);\n            return;\n        }\n        values.forEach(function(length) {\n            knownLength += length;\n        });\n        cb(null, knownLength);\n    });\n};\nFormData.prototype.submit = function(params, cb) {\n    var request, options, defaults = {\n        method: \"post\"\n    };\n    // parse provided url if it's string\n    // or treat it as options object\n    if (typeof params == \"string\") {\n        params = parseUrl(params);\n        options = populate({\n            port: params.port,\n            path: params.pathname,\n            host: params.hostname,\n            protocol: params.protocol\n        }, defaults);\n    // use custom params\n    } else {\n        options = populate(params, defaults);\n        // if no port provided use default one\n        if (!options.port) {\n            options.port = options.protocol == \"https:\" ? 443 : 80;\n        }\n    }\n    // put that good code in getHeaders to some use\n    options.headers = this.getHeaders(params.headers);\n    // https if specified, fallback to http in any other case\n    if (options.protocol == \"https:\") {\n        request = https.request(options);\n    } else {\n        request = http.request(options);\n    }\n    // get content length and fire away\n    this.getLength((function(err, length) {\n        if (err && err !== \"Unknown stream\") {\n            this._error(err);\n            return;\n        }\n        // add content length\n        if (length) {\n            request.setHeader(\"Content-Length\", length);\n        }\n        this.pipe(request);\n        if (cb) {\n            var onResponse;\n            var callback = function(error, responce) {\n                request.removeListener(\"error\", callback);\n                request.removeListener(\"response\", onResponse);\n                return cb.call(this, error, responce);\n            };\n            onResponse = callback.bind(this, null);\n            request.on(\"error\", callback);\n            request.on(\"response\", onResponse);\n        }\n    }).bind(this));\n    return request;\n};\nFormData.prototype._error = function(err) {\n    if (!this.error) {\n        this.error = err;\n        this.pause();\n        this.emit(\"error\", err);\n    }\n};\nFormData.prototype.toString = function() {\n    return \"[object FormData]\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/form-data/lib/form_data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/node_modules/form-data/lib/populate.js":
/*!********************************************************************!*\
  !*** ./node_modules/openai/node_modules/form-data/lib/populate.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("// populates missing values\n\nmodule.exports = function(dst, src) {\n    Object.keys(src).forEach(function(prop) {\n        dst[prop] = dst[prop] || src[prop];\n    });\n    return dst;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQjs7QUFDM0JBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxHQUFHLEVBQUVDLEdBQUc7SUFFaENDLE9BQU9DLElBQUksQ0FBQ0YsS0FBS0csT0FBTyxDQUFDLFNBQVNDLElBQUk7UUFFcENMLEdBQUcsQ0FBQ0ssS0FBSyxHQUFHTCxHQUFHLENBQUNLLEtBQUssSUFBSUosR0FBRyxDQUFDSSxLQUFLO0lBQ3BDO0lBRUEsT0FBT0w7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL0NoYXRBcHAvLi9ub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzPzY4NjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcG9wdWxhdGVzIG1pc3NpbmcgdmFsdWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRzdCwgc3JjKSB7XG5cbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApXG4gIHtcbiAgICBkc3RbcHJvcF0gPSBkc3RbcHJvcF0gfHwgc3JjW3Byb3BdO1xuICB9KTtcblxuICByZXR1cm4gZHN0O1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZHN0Iiwic3JjIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJwcm9wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openai/node_modules/form-data/lib/populate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openai/package.json":
/*!******************************************!*\
  !*** ./node_modules/openai/package.json ***!
  \******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"openai","version":"3.3.0","description":"Node.js library for the OpenAI API","repository":{"type":"git","url":"git@github.com:openai/openai-node.git"},"keywords":["openai","open","ai","gpt-3","gpt3"],"author":"OpenAI","license":"MIT","main":"./dist/index.js","types":"./dist/index.d.ts","scripts":{"build":"tsc --outDir dist/"},"dependencies":{"axios":"^0.26.0","form-data":"^4.0.0"},"devDependencies":{"@types/node":"^12.11.5","typescript":"^3.6.4"}}');

/***/ })

};
;